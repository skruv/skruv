{
  "version": 3,
  "sources": ["../../index.js", "../../utils/jsx-runtime.js", "index.jsx"],
  "sourcesContent": ["// @ts-check\n/* global HTMLInputElement HTMLOptionElement Text Comment HTMLElement SVGElement Document Window */\n\n// TODO: Build\n// Error boundaries (custom events that bubble on error)\n// single level state\n\n// TODO: Document\n// data-skruv-key\n// data-skruv-opaque\n// data-skruv-finished\n// data-skruv-wait-for-not-empty\n// data-skruv-ssr-rendered\n// oncreate & onremove\n// hydration workflow\n// css scoping\n// state mgmt\n\n// Globals used:\n// document.querySelector\n// elem.ownerDocument.documentElement\n// elem.contains\n// elem.replaceChild\n// elem.prepend\n// elem.after\n// elem.parentNode\n// elem.removeChild\n// elem.dispatchEvent\n// elem.getAttributeNames\n// elem.setAttribute\n// elem.getAttribute\n// elem.removeAttribute\n// elem.setAttribute\n// elem.removeEventListener\n// elem.addEventListener\n// documentElement.createComment\n// documentElement.createTextNode\n// documentElement.createElementNS\n// documentElement.createElement\n\n/**\n * @typedef {Vnode|Function|String|Number|Boolean|SkruvAsyncGenerator|SkruvAsyncIterable|SkruvPromise|SkruvAsyncFunction} SkruvValue\n * @typedef {(AsyncGenerator<Function|String|Boolean|Number>|AsyncIterable<Function|String|Boolean|Number>)} SkruvAttributesIterable\n * @typedef {(Promise<Function|String|Boolean|Number>|function(): Promise<Function|String|Boolean|Number>)} SkruvAttributesPromiseOrAsyncFunction\n * @typedef {Partial<GlobalEventHandlers> & Record<string,(string|boolean|Function|number|Object)>} PreparedVnodeAtrributes\n * @typedef {PreparedVnodeAtrributes & Record<string,(string|boolean|Function|number|Object|SkruvAttributesPromiseOrAsyncFunction|SkruvAttributesIterable)>} VnodeAtrributes\n * @typedef {AsyncGenerator<SkruvValue>} SkruvAsyncGenerator\n * @typedef {AsyncIterable<SkruvValue>} SkruvAsyncIterable\n * @typedef {Promise<SkruvValue>} SkruvPromise\n * @typedef {function(): Promise<SkruvValue>} SkruvAsyncFunction\n * @typedef {Vnode|Vnode[]|SkruvValue} SkruvChildNode\n * @typedef {Array<SkruvChildNode>} SkruvChildNodes\n */\n/**\n * @typedef {object} Vnode\n * @prop {Symbol} s\n * @prop {String} t\n * @prop {SkruvChildNodes} _c\n * @prop {VnodeAtrributes} _a\n * @prop {{r:() => boolean}} r\n */\n/**\n * @typedef {object} PreparedVnode\n * @prop {Symbol} p\n * @prop {Symbol} s\n * @prop {String} t\n * @prop {SkruvChildNodes} _c\n * @prop {VnodeAtrributes} _a\n * @prop {{r:() => boolean}} r\n * @prop {Array<PreparedVnode>} c\n * @prop {PreparedVnodeAtrributes} a\n */\nconst s = Symbol.for('skruvDom')\nconst p = Symbol.for('skruvDomPrepared')\n/** @type {WeakMap<SkruvAsyncGenerator|SkruvAsyncIterable|SkruvPromise|SkruvAsyncFunction|Function|Vnode, SkruvValue?>} */\nconst generatorResults = new WeakMap()\n\n/** @type {WeakMap<Node, Record<string,EventListener?>>} */\nconst skruvListeners = new WeakMap()\n\n/** @type {WeakMap<Object, Node>} */\nconst keyedNodes = new WeakMap()\n\nlet hydrationResolve = () => {}\n/** @type {Promise<void>} */\nconst hydrationPromise = (new Promise(resolve => { hydrationResolve = () => resolve() }))\n\n/** @type {Set<SkruvAsyncGenerator|SkruvAsyncIterable|SkruvPromise|SkruvAsyncFunction|Function|Vnode?>} */\nconst waitingGens = new Set()\n\n// @ts-ignore This is a global set by SSR/Tests\nlet hydrating = globalThis?.SkruvWaitForAsync || !!document.querySelector('data-skruv-ssr-rendered')\n\n/** @type {Vnode} */\nexport const Vnode = { s, t: '', _c: [], _a: {}, r: { r: () => false } }\n\n/** @type {VnodeAtrributes} */\nexport const VnodeAtrributes = {}\n\n/**\n * @param {string} t\n * @param  {Array<SkruvChildNode|VnodeAtrributes>} c\n * @returns {Vnode}\n */\n// @ts-ignore TODO: TS seems to be confused about the spreading of attributes and children. Try separating them\nexport const h = (t, ...c) => ({\n  s,\n  t,\n  ...(\n    typeof c[0] === 'object' &&\n    !Array.isArray(c[0]) &&\n    !(c[0] instanceof Function) && !(c[0] instanceof Function && c[0]?.prototype?.toString?.() === '[object AsyncGenerator]') &&\n    // @ts-ignore How to check for booted generators?\n    !(c[0]?.[Symbol.asyncIterator]) &&\n    // @ts-ignore TODO: check why this still thinks a function can fall though\n    c[0]?.s !== s\n      ? {\n        _a: c[0],\n        _c: c.slice(1)\n      }\n      : {\n        _a: {},\n        _c: c\n      }),\n  r: {\n    r: () => {\n      if (hydrating && !waitingGens.size) {\n        hydrating = false\n        hydrationResolve()\n      }\n      return true\n    }\n  }\n})\n\n// This functions takes in a potentially async value and makes it sync\n/**\n * @param {SkruvValue} value\n * @param  {PreparedVnode} parent\n * @param  {boolean} toVnodes\n * @returns {SkruvValue}\n */\nconst syncify = (value, parent, toVnodes) => {\n  /**\n   *\n   * @param {Function | SkruvAsyncIterable | SkruvPromise | Vnode} value\n   * @param {string | number | boolean | Function | Vnode | SkruvAsyncIterable | SkruvPromise | null} result\n   * @returns\n   */\n  const process = (value, result) => {\n    // @ts-ignore optional chaining\n    if (hydrating && result?._a?.['data-skruv-finished'] !== false) {\n      waitingGens.delete(value)\n      // Make sure any async calls that returned other async nodes get added to the hydration queue\n      if (result) {\n        // @ts-ignore vdom typeguard\n        if (result?.s === s) { flatten(result) } else { syncify(result, parent, toVnodes) }\n      }\n    }\n    generatorResults.set(value, result)\n    return parent.r.r()\n  }\n  // @ts-ignore maybe stricten up checks here\n  if (generatorResults.has(value)) { return generatorResults.get(value) }\n  // @ts-ignore TODO: Check what is the right way to detect started asynciterators\n  if (typeof value === 'object' && value?.[Symbol.asyncIterator]) {\n    const val = (/** @type {SkruvAsyncIterable} */ (value))\n    if (hydrating) { waitingGens.add(val) }\n    generatorResults.set(val, null);\n    (async () => { for await (const result of val) { if (!process(value, result)) { break } } })()\n    return false\n  } else if (value instanceof Function && value?.prototype?.toString?.() === '[object AsyncGenerator]') {\n    if (hydrating) { waitingGens.add(value) }\n    generatorResults.set(value, null);\n    (async () => { for await (const result of value()) { if (!process(value, result)) { break } } })()\n    return false\n    // @ts-ignore TODO: .then might not exist, but thats why I'm checking it!\n  } else if (typeof value === 'object' && value !== null && value?.then instanceof Function) {\n    const val = (/** @type {SkruvPromise} */ (value))\n    if (hydrating) { waitingGens.add(value) }\n    generatorResults.set(val, null);\n    (async () => { process(val, await val) })()\n    return false\n  } else if (typeof value === 'function' && value.constructor.name === 'AsyncFunction') {\n    if (hydrating) { waitingGens.add(value) }\n    generatorResults.set(value, null);\n    (async () => { process(value, await value()) })()\n    return false\n  } else if (typeof value === 'function') {\n    if (toVnodes) {\n      return value()\n    }\n    return value\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    if (toVnodes) {\n      return h('#text', { data: value.toString() })\n    }\n    return value.toString()\n  } else if (typeof value === 'boolean') {\n    return value\n  }\n  throw new Error('Unkown type in syncify: ' + JSON.stringify(value))\n}\n\n/**\n *\n * @param {SkruvChildNodes} c\n * @param {Vnode} skruvDom\n * @returns {PreparedVnode[]}\n */\nconst recurseVnodes = (c, skruvDom) => {\n  const newVnodes = c.flat(Infinity)\n    // @ts-ignore TS does not understand that .s is a typeguard for vnodes\n    .map(value => value?.s === s ? flatten(value) : syncify(value, skruvDom, true))\n    .flat(Infinity)\n    .filter(value => value !== null && typeof value !== 'boolean' && typeof value !== 'undefined')\n  // @ts-ignore Optional chaining\n  if (newVnodes.find(value => value?.p !== p) !== undefined) {\n    return recurseVnodes(newVnodes, skruvDom)\n  }\n  // @ts-ignore We already guard against this with the .p check above\n  return newVnodes\n}\n\n// This needs all sorts of cleanup\n// TODO: Instead of modifying the object have the r function be an object ({r:()=>}) so you can replace the inner function without having to modify the original\n/**\n * @param {Vnode} skruvDom\n * @returns {PreparedVnode}\n */\nconst flatten = skruvDom => {\n  const a = Object.fromEntries(\n    Object.entries(skruvDom._a)\n      .filter(entry => entry[1] !== null && typeof entry[1] !== 'undefined')\n      // @ts-ignore We already check null above\n      .map(([key, value]) => key === 'data-skruv-key' ? [key, value] : [key, syncify(value, skruvDom, false)])\n      .filter(entry => entry[1] !== null && typeof entry[1] !== 'undefined')\n  )\n  return {\n    p,\n    ...skruvDom,\n    a,\n    c: recurseVnodes(skruvDom._c, skruvDom)\n  }\n}\n\n/**\n * @param {PreparedVnode} current\n * @param {Element} currentNode\n * @param {ParentNode?} parentNode\n * @param {boolean} isSvg\n */\nconst renderRecursive = (current, currentNode, parentNode, isSvg) => {\n  if (current.p !== p) {\n    throw new Error('unkown type in render: ' + JSON.stringify(current))\n  }\n  for (const c of current.c) {\n    if (c.p !== p) {\n      throw new Error('unkown type in render: ' + JSON.stringify(c))\n    }\n  }\n  if (!parentNode || (currentNode && !parentNode.contains(currentNode))) { return false }\n  const ownerDocument = currentNode.ownerDocument\n  const documentElement = ownerDocument.documentElement\n\n  for (const key of currentNode.getAttributeNames().filter(k => !Object.keys(current.a).includes(k))) {\n    currentNode.removeAttribute(key)\n  }\n\n  for (const [key, value] of Object.entries(current.a)) {\n    if (key === 'data-skruv-key') { continue }\n    /** @type {EventListenerOrEventListenerObject} */\n    if (key.slice(0, 2) === 'on') {\n      let listeners = skruvListeners.get(currentNode)\n      const curr = listeners?.[key]\n      const event = key.slice(2)\n      if (!listeners) {\n        listeners = {}\n        skruvListeners.set(currentNode, listeners)\n      }\n      if (value instanceof Function) {\n        if (curr && curr.toString() !== value.toString()) {\n          currentNode.removeEventListener(event, curr)\n          listeners[key] = null\n        }\n        if (!curr) {\n          // @ts-ignore EventListener and Function are incompatible according to TS\n          listeners[key] = value\n          // @ts-ignore EventListener and Function are incompatible according to TS\n          currentNode.addEventListener(event, value)\n        }\n        continue\n      }\n      if (curr && !value) {\n        currentNode.removeEventListener(event, curr)\n        listeners[key] = null\n      }\n    }\n    if (value === null || value === false) {\n      if (currentNode.getAttribute(key)) {\n        currentNode.removeAttribute(key)\n      }\n      continue\n    }\n    currentNode.setAttribute(key, value.toString())\n    if (key === 'value' && (typeof value === 'number' || typeof value === 'string') && currentNode instanceof HTMLInputElement) {\n      currentNode[key] = value.toString()\n    }\n    if (\n      (\n        typeof value === 'boolean' &&\n        (\n          (currentNode instanceof HTMLInputElement && key === 'checked') ||\n          (currentNode instanceof HTMLOptionElement && key === 'selected')\n        )\n      ) || typeof value === 'object' // Support complex data passing for custom elements\n    ) {\n      // @ts-ignore TS does not think HTML properties are accessible directly?\n      currentNode[key] = value\n    }\n  }\n\n  current.r.r = () => renderRecursive(flatten(current), currentNode, parentNode, isSvg)\n\n  if (current.a['data-skruv-opaque']) {\n    return true\n  }\n\n  // Reuse of old nodes and handle keying\n  const prev = Array.from(currentNode.childNodes)\n  const curr = current.c\n  /** @type {Array<Node?>} */\n  const newOrder = []\n  /**\n   * @param {ChildNode} p\n   * @param {Vnode} c\n   * @returns {boolean}\n   */\n  const comp = (p, c) => p.nodeName.toLowerCase() === c.t && !newOrder.includes(p)\n  for (let ci = 0; ci < curr.length; ci++) {\n    const c = curr[ci]\n    const inPrev = c.a['data-skruv-key'] ? keyedNodes.get(c.a['data-skruv-key']) : prev.find(p => comp(p, c))\n    if (inPrev) {\n      newOrder[ci] = inPrev\n    } else {\n      newOrder[ci] = null\n    }\n  }\n  const toRemove = prev.filter(p => !newOrder.includes(p))\n\n  if (current.c.length || !current.a['data-skruv-wait-for-not-empty']) {\n    for (const elem of toRemove.filter(e => !!e)) {\n      currentNode.removeChild(elem)\n      // We have to do a microsleep before check since keyed nodes could have been moved to another location\n      setTimeout(() => {\n        if (!documentElement?.contains(elem) && skruvListeners.get(elem)?.onremove) { elem.dispatchEvent(new CustomEvent('remove')) }\n      }, 1)\n    }\n  }\n\n  for (let i = 0; i < newOrder.length; i++) {\n    const child = current.c[i]\n    let created = false\n    if (!newOrder[i]) {\n      let newChild\n      if (current.t === '#comment') {\n        newChild = ownerDocument.createComment('')\n      } else if (child.t === '#text') {\n        newChild = ownerDocument.createTextNode('')\n      } else if (child.p === p && (isSvg || child.t === 'svg')) {\n        newChild = ownerDocument.createElementNS('http://www.w3.org/2000/svg', child.t)\n      } else {\n        newChild = ownerDocument.createElement(child.t)\n      }\n      created = true\n      if (currentNode.childNodes[i]) {\n        currentNode.replaceChild(newChild, currentNode.childNodes[i])\n      } else if (i === 0) {\n        currentNode.prepend(newChild)\n      } else {\n        currentNode.childNodes[i - 1].after(newChild)\n      }\n    } else if (newOrder[i] !== currentNode.childNodes[i]) {\n      // Make ts happy\n      const nodeToMove = newOrder[i]\n      if (nodeToMove) {\n        if (i === 0) {\n          currentNode.prepend(nodeToMove)\n        } else {\n          currentNode.childNodes[i - 1].after(nodeToMove)\n        }\n      }\n    }\n    const childNode = currentNode.childNodes[i]\n    if ((childNode instanceof Text || childNode instanceof Comment)) {\n      if (childNode.data !== child.a.data) { childNode.data = child.a.data.toString() }\n      // Comment and text nodes have no attributes or children so bail here\n      continue\n    }\n    if (!(childNode instanceof HTMLElement || childNode instanceof SVGElement)) {\n      throw new Error('Child node of unknown type: ' + JSON.stringify({ childNode, child }))\n    }\n    if (child.a['data-skruv-key'] && !keyedNodes.has(child.a['data-skruv-key'])) { keyedNodes.set(child.a['data-skruv-key'], childNode) }\n    renderRecursive(child, childNode, currentNode, isSvg || current.t === 'svg')\n    if (created && skruvListeners.get(childNode)?.oncreate) { childNode.dispatchEvent(new CustomEvent('create')) }\n  }\n  return true\n}\n\n/**\n * @param {Vnode} current\n * @param {Element} [currentNode]\n * @param {ParentNode?} parentNode\n * @param {boolean} [isSvg]\n */\nexport const render = async (\n  current,\n  currentNode = document.documentElement,\n  parentNode = currentNode?.parentNode,\n  isSvg = false\n) => {\n  if (!parentNode) {\n    // TODO: create error classes for skruv, inherit from one single error class\n    throw new Error('Skruv: No parent to render to')\n  }\n  if (!(parentNode instanceof HTMLElement || parentNode instanceof SVGElement || parentNode instanceof Document || parentNode instanceof Window)) {\n    // TODO: create error classes for skruv, inherit from one single error class\n    throw new Error('Skruv: Parent of wrong type')\n  }\n  if (hydrating) {\n    // If we are hydrating we first do a pass to find all async nodes, resolve those and then do a full render\n    flatten(current).r.r()\n    await hydrationPromise\n  }\n  renderRecursive(flatten(current), currentNode, parentNode, isSvg)\n}\n\n/** @type {Record<string, ((...c: Array<SkruvChildNode|VnodeAtrributes>) => Vnode)>} */\nconst proxyBase = {}\nexport const htmlFactory = new Proxy(\n  proxyBase,\n  { get: (_target, /** @type {string} */name) => /** @param {Array<SkruvChildNode|VnodeAtrributes>} c */(...c) => h(name, ...c) }\n)\n", "/** @typedef {typeof import(\"../index.js\").Vnode} Vnode */\n/** @typedef {typeof import(\"../index.js\").VnodeAtrributes} VnodeAtrributes */\n\nimport { h } from '..'\n\n/**\n * @typedef {Object} JSXAdditionalProperties\n * @property {[Vnode]} [children]\n *\n * @typedef {VnodeAtrributes & JSXAdditionalProperties} JSXAttributes\n */\n\n/**\n * @param {String} str\n * @returns {String}\n */\nconst kebabize = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase())\n\n// eslint-disable-next-line import/no-unused-modules\nexport const Fragment = '#fragment'\n\n/**\n * @param {String} nodeName\n * @param {JSXAttributes} [attributes={}]\n * @returns {Vnode | [Vnode?]}\n */\n// eslint-disable-next-line import/no-unused-modules\nexport const jsx = (nodeName, attributes = {}) => jsxs(nodeName, attributes)\n\n/**\n * @param {String} nodeName\n * @param {JSXAttributes} [attributes={}]\n * @returns {Vnode | [Vnode?]}\n */\n// eslint-disable-next-line import/no-unused-modules\nexport const jsxs = (nodeName, attributes = {}) => {\n  if (nodeName === Fragment && attributes.children) { return attributes.children }\n  if (nodeName === Fragment) { return [] }\n  const { children, ...attrs } = attributes\n  Object.keys(attrs).filter(e => e !== kebabize(e))\n    .forEach(e => {\n      attrs[kebabize(e)] = attrs[e]\n      delete attrs[e]\n    })\n  if (attrs['class-name']) {\n    attrs.class = attrs['class-name']\n    delete attrs['class-name']\n  }\n  if (attrs['html-for']) {\n    attrs.for = attrs['html-for']\n    delete attrs['html-for']\n  }\n  if (children) { return h(nodeName, attrs || {}, children) }\n  return h(nodeName, attrs || {})\n}\n", "import { render } from 'skruv'\n\nconst styles = /* css */`:root{color:#fff;background:#0f0f0f}`\n\nrender(\n  <html lang=\"en-US\">\n    {/* Fragments work too, but are usually not needed */}\n    <>\n      <head>\n        <title>jsx</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <style>{styles}</style>\n      </head>\n    </>\n    <body>\n      <div>\n        <p>Hello world</p>\n      </div>\n    </body>\n  </html>\n)\n"],
  "mappings": "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",
  "names": ["s", "p", "generatorResults", "skruvListeners", "keyedNodes", "hydrationResolve", "hydrationPromise", "resolve", "waitingGens", "hydrating", "h", "c", "_a", "_b", "_c", "_d", "_e", "s", "hydrating", "waitingGens", "hydrationResolve", "syncify", "value", "parent", "toVnodes", "process", "result", "flatten", "generatorResults", "val", "recurseVnodes", "skruvDom", "newVnodes", "p", "a", "entry", "key", "renderRecursive", "current", "currentNode", "parentNode", "isSvg", "ownerDocument", "documentElement", "k", "listeners", "skruvListeners", "curr", "event", "prev", "newOrder", "comp", "ci", "inPrev", "keyedNodes", "toRemove", "elem", "e", "i", "child", "created", "nodeToMove", "newChild", "childNode", "render", "hydrationPromise", "proxyBase", "htmlFactory", "_target", "name", "kebabize", "str", "$", "ofs", "Fragment", "jsx", "nodeName", "attributes", "jsxs", "children", "attrs", "e", "h", "styles", "render", "jsxs", "jsx", "Fragment"]
}
