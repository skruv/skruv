{
  "version": 3,
  "sources": ["../../index.js", "../../utils/css.js", "../../utils/state.js", "../../utils/syncify.js", "index.js"],
  "sourcesContent": ["/**\n * @typedef {Vnode|string|Boolean|Number|Record<string,(string|boolean|Function|number|Object)> & {_r:{_r:() => boolean}?} & {oncreate:(e: Node) => void}?} SkruvChildNode\n * @typedef {SkruvChildNode[]} SkruvChildNodes\n * @typedef {Record<string,(string|boolean|Function|number|Object)>} VnodeAttributes\n */\n/**\n * @typedef {object} Vnode\n * @prop {Symbol} s\n * @prop {string} t\n * @prop {SkruvChildNodes} c\n * @prop {{_r:() => boolean}} [_r]\n */\nconst s = Symbol.for('skruvDom')\nconst skruvKey = 'data-skruv-key'\n/** @type {WeakMap<Vnode|Node, Node|Object>} */\nconst keyed = new WeakMap()\n/** @type {WeakMap<Node, Object>} */\nconst oldKeys = new WeakMap()\n/** @type {WeakMap<Node, Record<string, function|string|boolean|object>>} */\nconst listenersMap = new WeakMap()\n/** @type {Record<string, Node>} */\nconst domCache = {}\n/**\n * @param {Record<string, any>|Vnode|string|number|boolean} current\n * @param {Node} currentNode\n * @param {ParentNode?} parentNode\n * @param {boolean} isSvg\n */\nexport const render = (\n  current,\n  currentNode = globalThis.document.documentElement,\n  parentNode = currentNode.parentNode,\n  isSvg = false,\n  forceFull = false\n) => {\n  if (!parentNode) {\n    throw new Error('No parent to render to')\n  }\n  if (typeof current === 'boolean') {\n    if (currentNode) { parentNode.removeChild(currentNode) }\n    return\n  }\n  const txtNode = (typeof current === 'string' || typeof current === 'number')\n  if (\n    forceFull ||\n    !currentNode ||\n    (txtNode && currentNode?.nodeName !== '#text') ||\n    (!txtNode && currentNode?.nodeName.toLowerCase() !== current.t.toLowerCase())\n  ) {\n    const _currentNode = currentNode\n    if (txtNode) {\n      currentNode = document.createTextNode('' + current)\n    } else if (isSvg || current.t === 'svg') {\n      isSvg = true\n      currentNode = (domCache[current.t] || (domCache[current.t] = document.createElementNS('http://www.w3.org/2000/svg', current.t))).cloneNode(false)\n    } else {\n      currentNode = (domCache[current.t] || (domCache[current.t] = document.createElement(current.t))).cloneNode(false)\n    }\n    if (_currentNode) {\n      parentNode.replaceChild(currentNode, _currentNode)\n    } else {\n      parentNode.appendChild(currentNode)\n    }\n    if (txtNode) { return }\n  }\n  if (txtNode) {\n    // eslint-disable-next-line eqeqeq\n    if (currentNode.textContent != current) { currentNode.textContent = '' + current }\n    return\n  }\n  if (current._r) {\n    current._r._r = () => {\n      if (!currentNode || !parentNode.contains(currentNode)) { return false }\n      render(current, currentNode, parentNode, isSvg)\n      return true\n    }\n  }\n  let children = current.c.flat(Infinity)\n  /** @type {Record<string, string|boolean|function|object>} */\n  let attributes = {}\n  if (children[0]?.constructor === Object && children[0]?.s !== s) {\n    attributes = children[0]\n    children = children.slice(1)\n    for (const key in attributes) {\n      if (key === skruvKey || key[0] === '_') { continue }\n      if (key[0] === 'o' && key[1] === 'n') {\n        let listeners = listenersMap.get(currentNode)\n        if (!listeners) {\n          listeners = {}\n          listenersMap.set(currentNode, listeners)\n        }\n        const evt = key.slice(2)\n        if (!listeners[key] || ('' + listeners[key]) !== ('' + attributes[key])) {\n          if (evt === 'create') {\n            // Wait to call until after a microsleep to ensure that we don't remove any elements created in the oncreate\n            setTimeout(\n              // @ts-ignore: .on functions should always be callable\n              () =>attributes[key](currentNode),\n              0\n            )\n            listeners[key] = attributes[key]\n            continue\n          }\n          // @ts-ignore: TODO: TS does not think Function is compatible with EventListenerOrEventListenerObject\n          if (listeners[key]) { currentNode.removeEventListener(evt, listeners[key]) }\n          // @ts-ignore: TODO: TS does not think Function is compatible with EventListenerOrEventListenerObject\n          currentNode.addEventListener(evt, attributes[key])\n          listeners[key] = attributes[key]\n        } else if (!attributes[key]) {\n          // @ts-ignore: TODO: TS does not think Function is compatible with EventListenerOrEventListenerObject\n          currentNode.removeEventListener(evt, listeners[key])\n        }\n        // @ts-ignore: TODO: TS does not like that currentNode \"might\" be a Node here, but since we do checking for text nodes above it is a Element\n      } else if (attributes[key] !== currentNode.getAttribute(key)) {\n        if (\n          (key === 'checked' || key === 'selected' || key === 'value') ||\n          typeof attributes[key] === 'object' // Support complex data passing for custom elements\n        ) {\n          // @ts-ignore: TODO: TS does not like indexing elements with strings, but in this case we need to to set special props. Could be fixed with excessive checking, but that'd slow down perf\n          currentNode[key] = attributes[key]\n        }\n        if (attributes[key]) {\n          // @ts-ignore: TODO: TS does not like that currentNode \"might\" be a Node here, but since we do checking for text nodes above it is a Element\n          currentNode.setAttribute(key, '' + attributes[key])\n        } else {\n          // @ts-ignore: TODO: TS does not like that currentNode \"might\" be a Node here, but since we do checking for text nodes above it is a Element\n          currentNode.removeAttribute(key)\n        }\n      }\n    }\n  }\n  if (!children.length && currentNode.childNodes.length) {\n    if (attributes['data-skruv-wait-for-not-empty']) {\n      return\n    }\n    // @ts-ignore: TODO: TS does not like that currentNode \"might\" be a Node here, but since we do checking for text nodes above it is a Element\n    currentNode.replaceChildren()\n    return\n  }\n  if (currentNode.childNodes.length > children.length) {\n    for (let i = children.length; i < currentNode.childNodes.length; i++) {\n      currentNode.removeChild(currentNode.childNodes[i])\n    }\n  }\n  for (let i = 0; i < children.length; i++) {\n    let forceFull = false\n    /** @type {Element} */\n    let keyedNode\n    if (children[i].constructor === Object) {\n      // @ts-ignore: A key in the keyed map only points to actual Elements.\n      keyedNode = keyed.get(children[i].c[0]?.[skruvKey])\n      if (keyedNode) {\n        if (keyedNode !== currentNode.childNodes[i]) {\n          if (keyedNode === currentNode.childNodes[i + 1]) {\n            currentNode.removeChild(currentNode.childNodes[i])\n          } else if (currentNode.childNodes[i] && keyed.get(children[i + 1]?.c?.[0]?.[skruvKey]) === currentNode.childNodes[i]) {\n            currentNode.insertBefore(keyedNode, currentNode.childNodes[i])\n          } else if (currentNode.childNodes[i]) {\n            currentNode.replaceChild(keyedNode, currentNode.childNodes[i])\n          } else {\n            currentNode.appendChild(keyedNode)\n          }\n        }\n        forceFull = children[i].c[0][skruvKey] !== oldKeys.get(currentNode.childNodes[i])\n        if (!forceFull) {\n          const lastKeyCopy = keyed.get(currentNode.childNodes[i])\n          if (lastKeyCopy) {\n            let noChange = true\n            for (const k in children[i].c[0][skruvKey]) {\n              // @ts-ignore: oldKey might be undefinded\n              if (children[i].c[0][skruvKey][k] !== lastKeyCopy[k]) {\n                noChange = false\n              }\n            }\n            if (noChange) { continue }\n          }\n        }\n      } else {\n        forceFull = keyed.has(currentNode.childNodes[i])\n      }\n    }\n    // @ts-ignore: TODO: TS does not like that currentNode \"might\" be a Node here, but since we do checking for text nodes above it is a Element\n    render(children[i], currentNode.childNodes[i] || false, currentNode, isSvg && current.t !== 'foreignObject', forceFull)\n  }\n  if (attributes[skruvKey]) {\n    // @ts-ignore: TODO: The skruvkey is always an object here, but clarify the types for the attributes a bit more\n    keyed.set(attributes[skruvKey], currentNode)\n    oldKeys.set(currentNode, attributes[skruvKey])\n    // @ts-ignore: TODO: The skruvkey is always an object here, but clarify the types for the attributes a bit more\n    keyed.set(currentNode, { ...attributes[skruvKey] })\n  }\n}\n\n/** @type {Record<string, (...c: Array<Record<string, any>|Vnode|string|number|boolean>) => Vnode>} */\nexport const elementFactory = new Proxy({}, { get: (_, t) => (/** @type {Array<Record<string, any>|Vnode|string|number|boolean>} */ ...c) => ({ s, t, c }) })\n\n/**\n * @param {string} t\n * @param  {...Array<Record<string, any>|Vnode|string|number|boolean>} c\n * @returns {Vnode}\n */\n// @ts-ignore: TODO: Check why c is being complained about here\nexport const h = (t, ...c) => ({ s, t, c })\n", "/* global CSSMediaRule CSSStyleRule CSSOM */\n\n// TODO: package\n/** @type {function} */\nlet resolveStyles = () => {}\nlet promiseStyles = new Promise(resolve => { resolveStyles = resolve })\nconst styleMap = new Map()\n\n// // Example of using webcrypto for hashing. Only works if loaded over https, so not used. Also requires async\n// const encoder = new TextEncoder()\n// /**\n//  * @param {string} str\n//  * @returns {Promise<string>}\n//  */\n// const hash = async str => [...new Uint8Array(await crypto.subtle.digest('SHA-1', encoder.encode(str)))].map(x => x.toString(16).padStart(2, '0')).join('')\n\n/**\n * @param {string} str\n * @returns {string}\n */\nconst hash = str => {\n  let hash = 0\n  if (str.length === 0) { return hash.toString() }\n  for (let i = 0; i < str.length; i++) {\n    hash = ((hash << 5) - hash) + str.charCodeAt(i)\n    hash |= 0 // Convert to 32bit integer\n  }\n  return hash.toString()\n}\n\n/**\n * Scoped CSS helper\n * @param {TemplateStringsArray} strings\n * @param {(String | Number | Boolean | undefined)[]} keys\n * @returns {string}\n */\nexport const css = (strings, ...keys) => {\n  const stylesheet = strings.reduce(\n    /**\n     * @param {String[]} prev\n     * @param {String} curr\n     * @returns {String[]}\n     */\n    (prev, curr, i) => {\n      prev.push(curr)\n      prev.push(keys?.[i]?.toString() || '')\n      return prev\n    },\n    []\n  ).join('')\n\n  // The implementation of this is lifted from https://github.com/samthor/scoped with some modifications\n  const attrRe = /^\\[.*?(?:([\"'])(?:.|\\\\\\1)*\\1.*)*\\]/\n  const walkSelectorRe = /([([,]|:scope\\b)/ // \"interesting\" setups\n  const scopeRe = /^:scope\\b/\n\n  /**\n   * Consumes a single selector from candidate selector text, which may contain many.\n   *\n   * @param {string} raw selector text\n   * @param {string} prefix prefix to apply\n   * @return {?{selector: string, rest: string}}\n   */\n  function consumeSelector (raw, prefix) {\n    let i = raw.search(walkSelectorRe)\n    if (i === -1) {\n      // found literally nothing interesting, success\n      return {\n        selector: `${prefix} ${raw}`,\n        rest: ''\n      }\n    } else if (raw[i] === ',') {\n      // found comma without anything interesting, yield rest\n      return {\n        selector: `${prefix} ${raw.substring(0, i)}`,\n        rest: raw.substring(i + 1)\n      }\n    }\n\n    let leftmost = true // whether we're past a descendant or similar selector\n    let scope = false // whether :scope has been found + replaced\n    i = raw.search(/\\S/) // place i after initial whitespace only\n\n    let depth = 0\n    // eslint-disable-next-line no-labels\n    outer:\n    for (; i < raw.length; ++i) {\n      const char = raw[i]\n      switch (char) {\n        case '[': {\n          const match = attrRe.exec(raw.substring(i))\n          i += (match ? match[0].length : 1) - 1 // we add 1 every loop\n          continue\n        }\n        case '(':\n          ++depth\n          continue\n        case ':':\n          if (!leftmost) {\n            continue // doesn't matter if :scope is here, it'll always be ignored\n          } else if (!scopeRe.test(raw.substring(i))) {\n            continue // not ':scope', ignore\n          } else if (depth) {\n            return null\n          }\n          // Replace ':scope' with our prefix. This can happen many times; ':scope:scope' is valid.\n          // It will never apply to a descendant selector (e.g., \".foo :scope\") as this is ignored\n          // by browsers anyway (invalid).\n          raw = raw.substring(0, i) + prefix + raw.substring(i + 6)\n          i += prefix.length\n          scope = true\n          --i // we'd skip over next character otherwise\n          continue // run loop again\n        case ')':\n          if (depth) {\n            --depth\n          }\n          continue\n      }\n      if (depth) {\n        continue\n      }\n\n      switch (char) {\n        case ',':\n          // eslint-disable-next-line no-labels\n          break outer\n        case ' ':\n        case '>':\n        case '~':\n        case '+':\n          if (!leftmost) {\n            continue\n          }\n          leftmost = false\n      }\n    }\n\n    const selector = (scope ? '' : `${prefix} `) + raw.substring(0, i)\n    return { selector, rest: raw.substring(i + 1) }\n  }\n\n  /**\n   * @param {string} selectorText\n   * @param {string} prefix to apply\n   */\n  function updateSelectorText (selectorText, prefix) {\n    const found = []\n\n    while (selectorText) {\n      const consumed = consumeSelector(selectorText, prefix)\n      if (consumed === null) {\n        return ':not(*)'\n      }\n      found.push(consumed.selector)\n      selectorText = consumed.rest\n    }\n\n    return found.join(', ')\n  }\n\n  /**\n   * Upgrades a specific CSSRule.\n   *\n   * @param {!CSSRule} rule\n   * @param {string} prefix to apply\n   */\n  function upgradeRule (rule, prefix) {\n    if (rule instanceof CSSMediaRule) {\n      // upgrade children\n      const l = rule.cssRules.length\n      for (let j = 0; j < l; ++j) {\n        upgradeRule(rule.cssRules[j], prefix)\n      }\n      return\n    }\n\n    if (!(rule instanceof CSSStyleRule)) {\n      return // unknown rule type, ignore\n    }\n\n    rule.selectorText = updateSelectorText(rule.selectorText, prefix)\n  }\n  const scope = hash(stylesheet)\n  const retval = `skruv-css-scope-${scope}`\n  const prefix = `.${retval}`\n\n  if (styleMap.has(scope)) {\n    return retval\n  }\n  let sheet\n  // @ts-ignore TODO: If we don't have any way to parse the css bail out\n  if (!globalThis?.CSSOM && !globalThis.document?.implementation) {\n    throw new Error('No css parser available. Either add CSSOM to globalThis or run in browser.')\n  }\n  // @ts-ignore: TODO: Type confusion between polyfill and native.\n  if (globalThis?.CSSOM) {\n    // @ts-ignore: TODO: Type confusion between polyfill and native.\n    sheet = CSSOM.parse(stylesheet)\n  } else {\n    // In FF/Chrome we could create the sheet with new CSSStyleSheet(), but that does not work in safari (supported from 16.4 (Released 2023-03-27))\n    // TODO: don't recreate each run\n    const styleDoc = globalThis.document.implementation.createHTMLDocument('')\n    const styleElem = styleDoc.createElement('style')\n    styleElem.innerText = stylesheet\n    styleDoc.body.append(styleElem)\n    sheet = styleElem.sheet\n    styleDoc.body.removeChild(styleElem)\n  }\n  Array.from(sheet?.cssRules || []).forEach(e =>\n    // @ts-ignore: TODO: Type confusion between polyfill and native.\n    upgradeRule(e, prefix)\n  )\n  const upgradedStyles = Array.from(sheet?.cssRules || []).map(e =>\n    e.cssText || ''\n  )\n    .join('')\n  styleMap.set(scope, upgradedStyles)\n  resolveStyles()\n  return retval\n}\n\n/**\n * @returns {AsyncGenerator<string>}\n */\nexport async function * cssTextGenerator () {\n  yield Array.from(styleMap.values()).join('')\n  while (true) {\n    await promiseStyles\n    yield Array.from(styleMap.values()).join('')\n    promiseStyles = new Promise(resolve => { resolveStyles = resolve })\n  }\n}\n", "const resolveTimer = globalThis?.requestAnimationFrame || (cb => setTimeout(cb, 0))\n\n/**\n * @template T\n * @param {T} stateObj\n * @returns {import(\"./stateType\").State<T>}\n */\nexport const createState = stateObj => {\n  const Handler = class Handler {\n    constructor () {\n      this._scheduled = false\n      this._skruv_promise = new Promise(resolve => { this._skruv_resolve = resolve })\n    }\n\n    _resolve () {\n      if (this._skruv_parent && this._skruv_parent._resolve) {\n        this._skruv_parent._resolve()\n      }\n      if (this._scheduled) { return }\n      this._scheduled = true\n      resolveTimer(() => {\n        this._skruv_resolve('')\n        this._skruv_promise = new Promise(resolve => { this._skruv_resolve = resolve })\n        this._scheduled = false\n      })\n    }\n\n    /**\n     * @param {Record<string,any>|Array<any>} target\n     * @param {string|number} key\n     * @param {any} value\n     * @returns {boolean}\n     */\n    set (target, key, value) {\n      if (key === '_skruv_parent') {\n        this._skruv_parent = value\n        return true\n      }\n      // @ts-ignore\n      if (target[key] !== value) {\n        // @ts-ignore\n        target[key] = this.recurse(key, value, target)\n      }\n      return true\n    }\n\n    /**\n     * @param {Record<string,any>|Array<any>} target\n     * @param {string|number|Symbol} key\n     * @param {Proxy} proxy\n     * @returns {any}\n     */\n    get (target, key, proxy) {\n      if (key === 'getGenerator') {\n        // @ts-ignore\n        return key => ({\n          key: [key, target],\n          [Symbol.asyncIterator]: () => {\n            // If this is the first loop for this sub we should return directly for first value\n            let booted = false\n            return {\n              next: async () => {\n                if (booted) {\n                  await this._skruv_promise\n                } else {\n                  booted = true\n                }\n                // @ts-ignore\n                return { done: false, value: proxy[key] }\n              }\n            }\n          }\n        })\n      }\n      if (key === 'skruv_resolve') {\n        return () => this._resolve()\n      }\n      if (key === 'toJSON') {\n        if (target.constructor === Object) {\n          return Object.getOwnPropertyNames(target).reduce((acc, curr) => {\n            // @ts-ignore\n            acc[curr] = target[curr]?.toJSON || target[curr]\n            return acc\n          }, {})\n        }\n        if (target.constructor === Array) {\n          return target.map(curr => curr?.toJSON || curr)\n        }\n        return target\n      }\n      if (key === Symbol.asyncIterator) {\n        return () => {\n          // If this is the first loop for this sub we should return directly for first value\n          let booted = false\n          return {\n            next: async () => {\n              if (booted) {\n                await this._skruv_promise\n              } else {\n                booted = true\n              }\n              return { done: false, value: proxy }\n            }\n          }\n        }\n      }\n      // @ts-ignore\n      return target[key]\n    }\n\n    /**\n     * @param {Record<string,any>|Array<any>} target\n     * @param {string|number} key\n     * @returns {boolean}\n     */\n    deleteProperty (target, key) {\n      // @ts-ignore\n      const res = delete target[key]\n      this._resolve()\n      return res\n    }\n\n    /**\n     * @param {string} path\n     * @param {any} value\n     * @param {Record<string,any>|Array<any>} target\n     * @returns {any}\n     */\n    recurse (path, value, target) {\n      // check for falsy values\n      if (value && value.constructor) {\n        // @ts-ignore\n        if (value.constructor === Object && target?.[path]?.constructor === Object) {\n          for (const key of Object.getOwnPropertyNames(value)) {\n            // @ts-ignore\n            if (target[path][key] !== value[key]) {\n              // @ts-ignore\n              target[path][key] = value[key]\n            }\n          }\n          // @ts-ignore\n          for (const key of Object.getOwnPropertyNames(target[path])\n            .filter(item => !Object.getOwnPropertyNames(value).includes(item))\n          ) {\n            // @ts-ignore\n            delete target[path][key]\n            this._resolve()\n          }\n          // @ts-ignore\n          return target[path]\n        } else if (value.constructor === Object) {\n          const subProxy = new Handler()\n          // check object properties for other objects or arrays\n          value = Object.keys(value).reduce((acc, key) => {\n            // @ts-ignore\n            acc[key] = this.recurse(`${path}.${key}`, value[key])\n            // @ts-ignore\n            if (typeof acc[key] === 'object' && acc[key] !== null) { acc[key]._skruv_parent = subProxy }\n            return acc\n          }, {})\n          // @ts-ignore\n          value = new Proxy(value, subProxy)\n          value._skruv_parent = this\n          this._resolve()\n        } else if (value.constructor === Array) {\n          const subProxy = new Handler()\n          // check arrays for objects or arrays\n          value = value.map((child, key) => {\n            // @ts-ignore\n            const newValue = this.recurse(`${path}[${key}]`, child)\n            if (typeof newValue === 'object' && newValue !== null) { newValue._skruv_parent = subProxy }\n            return newValue\n          })\n          // @ts-ignore\n          value = new Proxy(value, subProxy)\n          value._skruv_parent = this\n          this._resolve()\n        } else {\n          this._resolve()\n        }\n      } else {\n        this._resolve()\n      }\n      return value\n    }\n  }\n\n  // create root proxy\n  // @ts-ignore\n  const rootProxy = new Proxy(stateObj.constructor === Array ? [] : {}, new Handler('root'))\n  Object.assign(rootProxy, stateObj)\n  // @ts-ignore\n  return rootProxy\n}\n", "let hydrating = true\nconst generatorResults = new WeakMap()\nlet hydrationResolve = () => { }\nconst hydrationPromise = (new Promise(resolve => { hydrationResolve = () => resolve(true) }))\nconst waitingGens = new Set()\n\n/**\n * @template T\n * @param {AsyncGenerator<T>|AsyncIterator<T>|Promise<T>|(()=>T|(()=>Promise<T>))} value\n * @param {string|number} key\n * @param {Array<any>|Object} parent\n * @param {{_r:{_r:() => boolean}}} cbparent\n * @param {Object|string|number|boolean|{c:[{'data-skruv-finished':boolean}]}} result\n * @returns {boolean}\n */\nconst process = (value, key, parent, cbparent, result) => {\n  if (hydrating && !(typeof result === 'object' && 'c' in result && result?.c?.[0]?.['data-skruv-finished'] === false)) {\n    waitingGens.delete(value)\n    if (!waitingGens.size) {\n      hydrating = false\n      setTimeout(() => hydrationResolve(), 0)\n    }\n  }\n  generatorResults.set(value, result)\n  // @ts-ignore: This complains, but we will always get either array and number key or object and string key\n  parent[key] = result\n  return cbparent._r._r()\n}\n\n/**\n * @template T\n * @param {AsyncGenerator<T>|AsyncIterator<T>|Promise<T>|(()=>T)|string|number|boolean|T} value\n * @param {(string|number)?} key\n * @param {(Array<any>|Object)?} parent\n * @param {{_r:{_r:() => boolean}}?} cbparent\n * @returns {T}\n */\nconst syncify = (value, key = null, parent = null, cbparent = null, root = true) => {\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' || value === null) {\n    // @ts-ignore\n    return value\n  }\n  // @ts-ignore\n  if (generatorResults.has(value)) {\n    // @ts-ignore\n    return generatorResults.get(value)\n  }\n  if (key && parent && cbparent) {\n    if (\n      (typeof value === 'object' && Symbol.asyncIterator in value) ||\n      (typeof value === 'function' && value.constructor.name === 'AsyncGeneratorFunction')\n    ) {\n      if (hydrating) { waitingGens.add(value) }\n      generatorResults.set(value, null);\n      (async () => {\n        // @ts-ignore\n        for await (const result of (typeof value === 'function' ? value() : value)) {\n          if (!process(\n            // @ts-ignore\n            value,\n            key,\n            parent,\n            cbparent,\n            syncify(result, key, parent, cbparent, false)\n          )) {\n            break\n          }\n        }\n      })()\n      // @ts-ignore\n      return null\n    }\n    if (\n      (typeof value === 'object' && 'then' in value && typeof value.then === 'function') ||\n      (typeof value === 'function' && value.constructor.name === 'AsyncFunction')\n    ) {\n      if (hydrating) { waitingGens.add(value) }\n      generatorResults.set(value, null);\n      (async () => {\n        process(\n          // @ts-ignore\n          value,\n          key,\n          parent,\n          cbparent,\n          syncify(\n            // @ts-ignore\n            await (typeof value === 'function' ? value() : value),\n            key,\n            parent,\n            cbparent,\n            false\n          )\n        )\n      })()\n      // @ts-ignore\n      return null\n    }\n    if (typeof value === 'function') {\n      // check for eventlisteners or internal functions\n      // TODO: Have some sort of way to pass functions to web components\n      if (typeof key === 'string' && ((key[0] === 'o' && key[1] === 'n') || key[0] === '_')) {\n        // @ts-ignore\n        return value\n      }\n      // @ts-ignore\n      const newValue = syncify(value(), key, parent, cbparent, false)\n      generatorResults.set(value, newValue)\n      return newValue\n    }\n  }\n  if (typeof value === 'object') {\n    /** @type {{_r:{_r:() => boolean}}|Array<any>} */\n    let newVal = {\n      _r: {\n        _r: () => {\n          if ((hydrating && !waitingGens.size) || !hydrating) {\n            hydrating = false\n            setTimeout(() => hydrationResolve(), 0)\n          }\n          return true\n        }\n      }\n    }\n    let cb = newVal\n    if (Array.isArray(value) && cbparent?._r) {\n      newVal = []\n      cb = cbparent\n    }\n    // Object with dummy default rerender callback\n    for (const key in value) {\n      // @ts-ignore: TODO: Have a stricter check than typeof value === 'object' above\n      const partialNewVal = syncify(value[key], key, newVal, cb, false)\n      // @ts-ignore\n      if (partialNewVal !== null || value[key] === null) {\n        // @ts-ignore: This complains, but we will always get either array and number key or object and string key\n        newVal[key] = partialNewVal\n      }\n    }\n    // If we are at the root and did a pass with no async work the promise should resolve\n    if ((root && hydrating && !waitingGens.size) || !hydrating) {\n      hydrating = false\n      setTimeout(() => hydrationResolve(), 0)\n    }\n    // @ts-ignore\n    return newVal\n  }\n  // @ts-ignore\n  return value\n}\n\nexport { hydrationPromise, syncify }\n", "import { elementFactory, render } from '../../index.js'\nimport { css, cssTextGenerator } from '../../utils/css.js'\nimport { createState } from '../../utils/state.js'\nimport { hydrationPromise, syncify } from '../../utils/syncify.js'\n\nconst { html, head, title, meta, link, body, main, h1, form, label, input, button, ol, li, a, style, script } = elementFactory\n\nconst state = createState({\n  todos: ['Write todos']\n})\n\nconst styles = css`:scope{color:#f1f1f1;background:#0f0f0f}body{max-width:40ch;margin:0 auto}form{display:flex;align-items:end}label{flex:1}input{width:100%}a{color:#9b9b9b}`\n\nconst dom = syncify(\n  html({ lang: 'en-US', class: styles },\n    head(\n      title(state.todos.getGenerator(0)),\n      meta({ name: 'viewport', content: 'width=device-width, initial-scale=1' }),\n      style(cssTextGenerator),\n      link({ rel: 'icon', href: '/icon.svg', type: 'image/svg+xml', sizes: 'any' }),\n      meta({ name: 'description', content: 'Skruv todo-list' })\n    ),\n    body(\n      main(\n        h1(state.todos.getGenerator(0)),\n        form({\n          onsubmit: /** @param {SubmitEvent} e */ e => {\n            e.preventDefault()\n            // @ts-ignore: The target here is a form.\n            state.todos.unshift(new FormData(e.target).get('todo')) && e.target.reset()\n          }\n        },\n        label(\n          'What do you need to do?',\n          input({\n            type: 'text',\n            name: 'todo'\n          })\n        ),\n        button('New!')\n        ),\n        async function * () {\n          for await (const currentState of state) {\n            yield ol(\n              currentState.todos.map((todo, i) => li(\n                `${todo} `,\n                a({\n                  href: '#',\n                  onclick: /** @param {MouseEvent}e */e => {\n                    e.preventDefault()\n                    currentState.todos.splice(i, 1)\n                  }\n                }, 'x')\n              ))\n            )\n          }\n        }\n      ),\n      !!globalThis.skruvSSRScript && script({ type: 'module' }, globalThis.skruvSSRScript)\n    )\n  )\n)\n\nexport const doRender = async () => {\n  await hydrationPromise\n  render(dom)\n  // Microsleep to allow for rendering to finish\n  await new Promise(resolve => setTimeout(resolve, 0))\n}\n\ndoRender()\n"],
  "mappings": "AAYA,IAAMA,EAAI,OAAO,IAAI,UAAU,EACzBC,EAAW,iBAEXC,EAAQ,IAAI,QAEZC,EAAU,IAAI,QAEdC,EAAe,IAAI,QAEnBC,EAAW,CAAC,EAOLC,EAAS,CACpBC,EACAC,EAAc,WAAW,SAAS,gBAClCC,EAAaD,EAAY,WACzBE,EAAQ,GACRC,EAAY,KACT,CAlCL,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAmCE,GAAI,CAACR,EACH,MAAM,IAAI,MAAM,wBAAwB,EAE1C,GAAI,OAAOF,GAAY,UAAW,CAC5BC,GAAeC,EAAW,YAAYD,CAAW,EACrD,MACF,CACA,IAAMU,EAAW,OAAOX,GAAY,UAAY,OAAOA,GAAY,SACnE,GACEI,GACA,CAACH,GACAU,IAAWV,GAAA,YAAAA,EAAa,YAAa,SACrC,CAACU,IAAWV,GAAA,YAAAA,EAAa,SAAS,iBAAkBD,EAAQ,EAAE,YAAY,EAC3E,CACA,IAAMY,EAAeX,EAcrB,GAbIU,EACFV,EAAc,SAAS,eAAe,GAAKD,CAAO,EACzCG,GAASH,EAAQ,IAAM,OAChCG,EAAQ,GACRF,GAAeH,EAASE,EAAQ,KAAOF,EAASE,EAAQ,GAAK,SAAS,gBAAgB,6BAA8BA,EAAQ,CAAC,IAAI,UAAU,EAAK,GAEhJC,GAAeH,EAASE,EAAQ,KAAOF,EAASE,EAAQ,GAAK,SAAS,cAAcA,EAAQ,CAAC,IAAI,UAAU,EAAK,EAE9GY,EACFV,EAAW,aAAaD,EAAaW,CAAY,EAEjDV,EAAW,YAAYD,CAAW,EAEhCU,EAAW,MACjB,CACA,GAAIA,EAAS,CAEPV,EAAY,aAAeD,IAAWC,EAAY,YAAc,GAAKD,GACzE,MACF,CACIA,EAAQ,KACVA,EAAQ,GAAG,GAAK,IACV,CAACC,GAAe,CAACC,EAAW,SAASD,CAAW,EAAY,IAChEF,EAAOC,EAASC,EAAaC,EAAYC,CAAK,EACvC,KAGX,IAAIU,EAAWb,EAAQ,EAAE,KAAK,GAAQ,EAElCc,EAAa,CAAC,EAClB,KAAIT,EAAAQ,EAAS,KAAT,YAAAR,EAAa,eAAgB,UAAUC,EAAAO,EAAS,KAAT,YAAAP,EAAa,KAAMb,EAAG,CAC/DqB,EAAaD,EAAS,GACtBA,EAAWA,EAAS,MAAM,CAAC,EAC3B,QAAWE,KAAOD,EAChB,GAAI,EAAAC,IAAQrB,GAAYqB,EAAI,KAAO,KACnC,GAAIA,EAAI,KAAO,KAAOA,EAAI,KAAO,IAAK,CACpC,IAAIC,EAAYnB,EAAa,IAAII,CAAW,EACvCe,IACHA,EAAY,CAAC,EACbnB,EAAa,IAAII,EAAae,CAAS,GAEzC,IAAMC,EAAMF,EAAI,MAAM,CAAC,EACvB,GAAI,CAACC,EAAUD,IAAS,GAAKC,EAAUD,IAAW,GAAKD,EAAWC,GAAO,CACvE,GAAIE,IAAQ,SAAU,CAEpB,WAEE,IAAKH,EAAWC,GAAKd,CAAW,EAChC,CACF,EACAe,EAAUD,GAAOD,EAAWC,GAC5B,QACF,CAEIC,EAAUD,IAAQd,EAAY,oBAAoBgB,EAAKD,EAAUD,EAAI,EAEzEd,EAAY,iBAAiBgB,EAAKH,EAAWC,EAAI,EACjDC,EAAUD,GAAOD,EAAWC,EAC9B,MAAYD,EAAWC,IAErBd,EAAY,oBAAoBgB,EAAKD,EAAUD,EAAI,CAGvD,MAAWD,EAAWC,KAASd,EAAY,aAAac,CAAG,KAEtDA,IAAQ,WAAaA,IAAQ,YAAcA,IAAQ,SACpD,OAAOD,EAAWC,IAAS,YAG3Bd,EAAYc,GAAOD,EAAWC,IAE5BD,EAAWC,GAEbd,EAAY,aAAac,EAAK,GAAKD,EAAWC,EAAI,EAGlDd,EAAY,gBAAgBc,CAAG,EAIvC,CACA,GAAI,CAACF,EAAS,QAAUZ,EAAY,WAAW,OAAQ,CACrD,GAAIa,EAAW,iCACb,OAGFb,EAAY,gBAAgB,EAC5B,MACF,CACA,GAAIA,EAAY,WAAW,OAASY,EAAS,OAC3C,QAASK,EAAIL,EAAS,OAAQK,EAAIjB,EAAY,WAAW,OAAQiB,IAC/DjB,EAAY,YAAYA,EAAY,WAAWiB,EAAE,EAGrD,QAASA,EAAI,EAAGA,EAAIL,EAAS,OAAQK,IAAK,CACxC,IAAId,EAAY,GAEZe,EACJ,GAAIN,EAASK,GAAG,cAAgB,OAG9B,GADAC,EAAYxB,EAAM,KAAIY,EAAAM,EAASK,GAAG,EAAE,KAAd,YAAAX,EAAmBb,EAAS,EAC9CyB,GAaF,GAZIA,IAAclB,EAAY,WAAWiB,KACnCC,IAAclB,EAAY,WAAWiB,EAAI,GAC3CjB,EAAY,YAAYA,EAAY,WAAWiB,EAAE,EACxCjB,EAAY,WAAWiB,IAAMvB,EAAM,KAAIe,GAAAD,GAAAD,EAAAK,EAASK,EAAI,KAAb,YAAAV,EAAiB,IAAjB,YAAAC,EAAqB,KAArB,YAAAC,EAA0BhB,EAAS,IAAMO,EAAY,WAAWiB,GAChHjB,EAAY,aAAakB,EAAWlB,EAAY,WAAWiB,EAAE,EACpDjB,EAAY,WAAWiB,GAChCjB,EAAY,aAAakB,EAAWlB,EAAY,WAAWiB,EAAE,EAE7DjB,EAAY,YAAYkB,CAAS,GAGrCf,EAAYS,EAASK,GAAG,EAAE,GAAGxB,KAAcE,EAAQ,IAAIK,EAAY,WAAWiB,EAAE,EAC5E,CAACd,EAAW,CACd,IAAMgB,EAAczB,EAAM,IAAIM,EAAY,WAAWiB,EAAE,EACvD,GAAIE,EAAa,CACf,IAAIC,EAAW,GACf,QAAWC,KAAKT,EAASK,GAAG,EAAE,GAAGxB,GAE3BmB,EAASK,GAAG,EAAE,GAAGxB,GAAU4B,KAAOF,EAAYE,KAChDD,EAAW,IAGf,GAAIA,EAAY,QAClB,CACF,OAEAjB,EAAYT,EAAM,IAAIM,EAAY,WAAWiB,EAAE,EAInDnB,EAAOc,EAASK,GAAIjB,EAAY,WAAWiB,IAAM,GAAOjB,EAAaE,GAASH,EAAQ,IAAM,gBAAiBI,CAAS,CACxH,CACIU,EAAWpB,KAEbC,EAAM,IAAImB,EAAWpB,GAAWO,CAAW,EAC3CL,EAAQ,IAAIK,EAAaa,EAAWpB,EAAS,EAE7CC,EAAM,IAAIM,EAAa,CAAE,GAAGa,EAAWpB,EAAU,CAAC,EAEtD,EAGa6B,EAAiB,IAAI,MAAM,CAAC,EAAG,CAAE,IAAK,CAACC,EAAG,IAAM,IAA0EC,KAAO,CAAE,EAAAhC,EAAG,EAAG,EAAAgC,CAAE,EAAG,CAAC,EC9L5J,IAAIC,EAAgB,IAAM,CAAC,EACvBC,EAAgB,IAAI,QAAQC,GAAW,CAAEF,EAAgBE,CAAQ,CAAC,EAChEC,EAAW,IAAI,IAcfC,EAAOC,GAAO,CAClB,IAAID,EAAO,EACX,GAAIC,EAAI,SAAW,EAAK,OAAOD,EAAK,SAAS,EAC7C,QAASE,EAAI,EAAGA,EAAID,EAAI,OAAQC,IAC9BF,GAASA,GAAQ,GAAKA,EAAQC,EAAI,WAAWC,CAAC,EAC9CF,GAAQ,EAEV,OAAOA,EAAK,SAAS,CACvB,EAQaG,EAAM,CAACC,KAAYC,IAAS,CApCzC,IAAAC,EAqCE,IAAMC,EAAaH,EAAQ,OAMzB,CAACI,EAAMC,EAAMP,IAAM,CA3CvB,IAAAI,EA4CM,OAAAE,EAAK,KAAKC,CAAI,EACdD,EAAK,OAAKF,EAAAD,GAAA,YAAAA,EAAOH,KAAP,YAAAI,EAAW,aAAc,EAAE,EAC9BE,CACT,EACA,CAAC,CACH,EAAE,KAAK,EAAE,EAGHE,EAAS,qCACTC,EAAiB,mBACjBC,EAAU,YAShB,SAASC,EAAiBC,EAAKC,EAAQ,CACrC,IAAIb,EAAIY,EAAI,OAAOH,CAAc,EACjC,GAAIT,IAAM,GAER,MAAO,CACL,SAAU,GAAGa,KAAUD,IACvB,KAAM,EACR,EACK,GAAIA,EAAIZ,KAAO,IAEpB,MAAO,CACL,SAAU,GAAGa,KAAUD,EAAI,UAAU,EAAGZ,CAAC,IACzC,KAAMY,EAAI,UAAUZ,EAAI,CAAC,CAC3B,EAGF,IAAIc,EAAW,GACXC,EAAQ,GACZf,EAAIY,EAAI,OAAO,IAAI,EAEnB,IAAII,EAAQ,EAEZC,EACA,KAAOjB,EAAIY,EAAI,OAAQ,EAAEZ,EAAG,CAC1B,IAAMkB,EAAON,EAAIZ,GACjB,OAAQkB,OACD,IAAK,CACR,IAAMC,EAAQX,EAAO,KAAKI,EAAI,UAAUZ,CAAC,CAAC,EAC1CA,IAAMmB,EAAQA,EAAM,GAAG,OAAS,GAAK,EACrC,QACF,KACK,IACH,EAAEH,EACF,aACG,IACH,GAAKF,EAEE,GAAKJ,EAAQ,KAAKE,EAAI,UAAUZ,CAAC,CAAC,GAElC,GAAIgB,EACT,OAAO,SAFP,cAFA,UASFJ,EAAMA,EAAI,UAAU,EAAGZ,CAAC,EAAIa,EAASD,EAAI,UAAUZ,EAAI,CAAC,EACxDA,GAAKa,EAAO,OACZE,EAAQ,GACR,EAAEf,EACF,aACG,IACCgB,GACF,EAAEA,EAEJ,SAEJ,GAAI,CAAAA,EAIJ,OAAQE,OACD,IAEH,MAAMD,MACH,QACA,QACA,QACA,IACH,GAAI,CAACH,EACH,SAEFA,EAAW,GAEjB,CAGA,MAAO,CAAE,UADSC,EAAQ,GAAK,GAAGF,MAAaD,EAAI,UAAU,EAAGZ,CAAC,EAC9C,KAAMY,EAAI,UAAUZ,EAAI,CAAC,CAAE,CAChD,CAMA,SAASoB,EAAoBC,EAAcR,EAAQ,CACjD,IAAMS,EAAQ,CAAC,EAEf,KAAOD,GAAc,CACnB,IAAME,EAAWZ,EAAgBU,EAAcR,CAAM,EACrD,GAAIU,IAAa,KACf,MAAO,UAETD,EAAM,KAAKC,EAAS,QAAQ,EAC5BF,EAAeE,EAAS,IAC1B,CAEA,OAAOD,EAAM,KAAK,IAAI,CACxB,CAQA,SAASE,EAAaC,EAAMZ,EAAQ,CAClC,GAAIY,aAAgB,aAAc,CAEhC,IAAMC,EAAID,EAAK,SAAS,OACxB,QAASE,EAAI,EAAGA,EAAID,EAAG,EAAEC,EACvBH,EAAYC,EAAK,SAASE,GAAId,CAAM,EAEtC,MACF,CAEMY,aAAgB,eAItBA,EAAK,aAAeL,EAAmBK,EAAK,aAAcZ,CAAM,EAClE,CACA,IAAME,EAAQjB,EAAKO,CAAU,EACvBuB,EAAS,mBAAmBb,IAC5BF,EAAS,IAAIe,IAEnB,GAAI/B,EAAS,IAAIkB,CAAK,EACpB,OAAOa,EAET,IAAIC,EAEJ,GAAI,EAAC,6BAAY,QAAS,GAACzB,EAAA,WAAW,WAAX,MAAAA,EAAqB,gBAC9C,MAAM,IAAI,MAAM,4EAA4E,EAG9F,GAAI,6BAAY,MAEdyB,EAAQ,MAAM,MAAMxB,CAAU,MACzB,CAGL,IAAMyB,EAAW,WAAW,SAAS,eAAe,mBAAmB,EAAE,EACnEC,EAAYD,EAAS,cAAc,OAAO,EAChDC,EAAU,UAAY1B,EACtByB,EAAS,KAAK,OAAOC,CAAS,EAC9BF,EAAQE,EAAU,MAClBD,EAAS,KAAK,YAAYC,CAAS,CACrC,CACA,MAAM,MAAKF,GAAA,YAAAA,EAAO,WAAY,CAAC,CAAC,EAAE,QAAQG,GAExCR,EAAYQ,EAAGnB,CAAM,CACvB,EACA,IAAMoB,EAAiB,MAAM,MAAKJ,GAAA,YAAAA,EAAO,WAAY,CAAC,CAAC,EAAE,IAAIG,GAC3DA,EAAE,SAAW,EACf,EACG,KAAK,EAAE,EACV,OAAAnC,EAAS,IAAIkB,EAAOkB,CAAc,EAClCvC,EAAc,EACPkC,CACT,EAKA,eAAwBM,GAAoB,CAE1C,IADA,MAAM,MAAM,KAAKrC,EAAS,OAAO,CAAC,EAAE,KAAK,EAAE,IAEzC,MAAMF,EACN,MAAM,MAAM,KAAKE,EAAS,OAAO,CAAC,EAAE,KAAK,EAAE,EAC3CF,EAAgB,IAAI,QAAQC,GAAW,CAAEF,EAAgBE,CAAQ,CAAC,CAEtE,CCxOA,IAAMuC,GAAe,mCAAY,yBAA0BC,GAAM,WAAWA,EAAI,CAAC,GAOpEC,EAAcC,GAAY,CACrC,IAAMC,EAAU,MAAMA,CAAQ,CAC5B,aAAe,CACb,KAAK,WAAa,GAClB,KAAK,eAAiB,IAAI,QAAQC,GAAW,CAAE,KAAK,eAAiBA,CAAQ,CAAC,CAChF,CAEA,UAAY,CACN,KAAK,eAAiB,KAAK,cAAc,UAC3C,KAAK,cAAc,SAAS,EAE1B,MAAK,aACT,KAAK,WAAa,GAClBL,EAAa,IAAM,CACjB,KAAK,eAAe,EAAE,EACtB,KAAK,eAAiB,IAAI,QAAQK,GAAW,CAAE,KAAK,eAAiBA,CAAQ,CAAC,EAC9E,KAAK,WAAa,EACpB,CAAC,EACH,CAQA,IAAKC,EAAQC,EAAKC,EAAO,CACvB,OAAID,IAAQ,iBACV,KAAK,cAAgBC,EACd,KAGLF,EAAOC,KAASC,IAElBF,EAAOC,GAAO,KAAK,QAAQA,EAAKC,EAAOF,CAAM,GAExC,GACT,CAQA,IAAKA,EAAQC,EAAKE,EAAO,CACvB,OAAIF,IAAQ,eAEHA,IAAQ,CACb,IAAK,CAACA,EAAKD,CAAM,EACjB,CAAC,OAAO,eAAgB,IAAM,CAE5B,IAAII,EAAS,GACb,MAAO,CACL,KAAM,UACAA,EACF,MAAM,KAAK,eAEXA,EAAS,GAGJ,CAAE,KAAM,GAAO,MAAOD,EAAMF,EAAK,EAE5C,CACF,CACF,GAEEA,IAAQ,gBACH,IAAM,KAAK,SAAS,EAEzBA,IAAQ,SACND,EAAO,cAAgB,OAClB,OAAO,oBAAoBA,CAAM,EAAE,OAAO,CAACK,EAAKC,IAAS,CA/E1E,IAAAC,EAiFY,OAAAF,EAAIC,KAAQC,EAAAP,EAAOM,KAAP,YAAAC,EAAc,SAAUP,EAAOM,GACpCD,CACT,EAAG,CAAC,CAAC,EAEHL,EAAO,cAAgB,MAClBA,EAAO,IAAIM,IAAQA,GAAA,YAAAA,EAAM,SAAUA,CAAI,EAEzCN,EAELC,IAAQ,OAAO,cACV,IAAM,CAEX,IAAIG,EAAS,GACb,MAAO,CACL,KAAM,UACAA,EACF,MAAM,KAAK,eAEXA,EAAS,GAEJ,CAAE,KAAM,GAAO,MAAOD,CAAM,EAEvC,CACF,EAGKH,EAAOC,EAChB,CAOA,eAAgBD,EAAQC,EAAK,CAE3B,IAAMO,EAAM,OAAOR,EAAOC,GAC1B,YAAK,SAAS,EACPO,CACT,CAQA,QAASC,EAAMP,EAAOF,EAAQ,CAhIlC,IAAAO,EAkIM,GAAIL,GAASA,EAAM,YAEjB,GAAIA,EAAM,cAAgB,UAAUK,EAAAP,GAAA,YAAAA,EAASS,KAAT,YAAAF,EAAgB,eAAgB,OAAQ,CAC1E,QAAWN,KAAO,OAAO,oBAAoBC,CAAK,EAE5CF,EAAOS,GAAMR,KAASC,EAAMD,KAE9BD,EAAOS,GAAMR,GAAOC,EAAMD,IAI9B,QAAWA,KAAO,OAAO,oBAAoBD,EAAOS,EAAK,EACtD,OAAOC,GAAQ,CAAC,OAAO,oBAAoBR,CAAK,EAAE,SAASQ,CAAI,CAAC,EAGjE,OAAOV,EAAOS,GAAMR,GACpB,KAAK,SAAS,EAGhB,OAAOD,EAAOS,EAChB,SAAWP,EAAM,cAAgB,OAAQ,CACvC,IAAMS,EAAW,IAAIb,EAErBI,EAAQ,OAAO,KAAKA,CAAK,EAAE,OAAO,CAACG,EAAKJ,KAEtCI,EAAIJ,GAAO,KAAK,QAAQ,GAAGQ,KAAQR,IAAOC,EAAMD,EAAI,EAEhD,OAAOI,EAAIJ,IAAS,UAAYI,EAAIJ,KAAS,OAAQI,EAAIJ,GAAK,cAAgBU,GAC3EN,GACN,CAAC,CAAC,EAELH,EAAQ,IAAI,MAAMA,EAAOS,CAAQ,EACjCT,EAAM,cAAgB,KACtB,KAAK,SAAS,CAChB,SAAWA,EAAM,cAAgB,MAAO,CACtC,IAAMS,EAAW,IAAIb,EAErBI,EAAQA,EAAM,IAAI,CAACU,EAAOX,IAAQ,CAEhC,IAAMY,EAAW,KAAK,QAAQ,GAAGJ,KAAQR,KAAQW,CAAK,EACtD,OAAI,OAAOC,GAAa,UAAYA,IAAa,OAAQA,EAAS,cAAgBF,GAC3EE,CACT,CAAC,EAEDX,EAAQ,IAAI,MAAMA,EAAOS,CAAQ,EACjCT,EAAM,cAAgB,KACtB,KAAK,SAAS,CAChB,MACE,KAAK,SAAS,OAGhB,KAAK,SAAS,EAEhB,OAAOA,CACT,CACF,EAIMY,EAAY,IAAI,MAAMjB,EAAS,cAAgB,MAAQ,CAAC,EAAI,CAAC,EAAG,IAAIC,EAAQ,MAAM,CAAC,EACzF,cAAO,OAAOgB,EAAWjB,CAAQ,EAE1BiB,CACT,ECjMA,IAAIC,EAAY,GACVC,EAAmB,IAAI,QACzBC,EAAmB,IAAM,CAAE,EACzBC,EAAoB,IAAI,QAAQC,GAAW,CAAEF,EAAmB,IAAME,EAAQ,EAAI,CAAE,CAAC,EACrFC,EAAc,IAAI,IAWlBC,EAAU,CAACC,EAAOC,EAAKC,EAAQC,EAAUC,IAAW,CAf1D,IAAAC,EAAAC,EAgBE,OAAIb,GAAa,EAAE,OAAOW,GAAW,UAAY,MAAOA,KAAUE,GAAAD,EAAAD,GAAA,YAAAA,EAAQ,IAAR,YAAAC,EAAY,KAAZ,YAAAC,EAAiB,0BAA2B,MAC5GR,EAAY,OAAOE,CAAK,EACnBF,EAAY,OACfL,EAAY,GACZ,WAAW,IAAME,EAAiB,EAAG,CAAC,IAG1CD,EAAiB,IAAIM,EAAOI,CAAM,EAElCF,EAAOD,GAAOG,EACPD,EAAS,GAAG,GAAG,CACxB,EAUMI,EAAU,CAACP,EAAOC,EAAM,KAAMC,EAAS,KAAMC,EAAW,KAAMK,EAAO,KAAS,CAClF,GAAI,OAAOR,GAAU,UAAY,OAAOA,GAAU,UAAY,OAAOA,GAAU,WAAaA,IAAU,KAEpG,OAAOA,EAGT,GAAIN,EAAiB,IAAIM,CAAK,EAE5B,OAAON,EAAiB,IAAIM,CAAK,EAEnC,GAAIC,GAAOC,GAAUC,EAAU,CAC7B,GACG,OAAOH,GAAU,UAAY,OAAO,iBAAiBA,GACrD,OAAOA,GAAU,YAAcA,EAAM,YAAY,OAAS,yBAE3D,OAAIP,GAAaK,EAAY,IAAIE,CAAK,EACtCN,EAAiB,IAAIM,EAAO,IAAI,GAC/B,SAAY,CAEX,cAAiBI,KAAW,OAAOJ,GAAU,WAAaA,EAAM,EAAIA,EAClE,GAAI,CAACD,EAEHC,EACAC,EACAC,EACAC,EACAI,EAAQH,EAAQH,EAAKC,EAAQC,EAAU,EAAK,CAC9C,EACE,KAGN,GAAG,EAEI,KAET,GACG,OAAOH,GAAU,UAAY,SAAUA,GAAS,OAAOA,EAAM,MAAS,YACtE,OAAOA,GAAU,YAAcA,EAAM,YAAY,OAAS,gBAE3D,OAAIP,GAAaK,EAAY,IAAIE,CAAK,EACtCN,EAAiB,IAAIM,EAAO,IAAI,GAC/B,SACCD,EAEEC,EACAC,EACAC,EACAC,EACAI,EAEE,MAAO,OAAOP,GAAU,WAAaA,EAAM,EAAIA,GAC/CC,EACAC,EACAC,EACA,EACF,CACF,GACC,EAEI,KAET,GAAI,OAAOH,GAAU,WAAY,CAG/B,GAAI,OAAOC,GAAQ,WAAcA,EAAI,KAAO,KAAOA,EAAI,KAAO,KAAQA,EAAI,KAAO,KAE/E,OAAOD,EAGT,IAAMS,EAAWF,EAAQP,EAAM,EAAGC,EAAKC,EAAQC,EAAU,EAAK,EAC9D,OAAAT,EAAiB,IAAIM,EAAOS,CAAQ,EAC7BA,CACT,CACF,CACA,GAAI,OAAOT,GAAU,SAAU,CAE7B,IAAIU,EAAS,CACX,GAAI,CACF,GAAI,MACGjB,GAAa,CAACK,EAAY,MAAS,CAACL,KACvCA,EAAY,GACZ,WAAW,IAAME,EAAiB,EAAG,CAAC,GAEjC,GAEX,CACF,EACIgB,EAAKD,EACL,MAAM,QAAQV,CAAK,IAAKG,GAAA,YAAAA,EAAU,MACpCO,EAAS,CAAC,EACVC,EAAKR,GAGP,QAAWF,KAAOD,EAAO,CAEvB,IAAMY,EAAgBL,EAAQP,EAAMC,GAAMA,EAAKS,EAAQC,EAAI,EAAK,GAE5DC,IAAkB,MAAQZ,EAAMC,KAAS,QAE3CS,EAAOT,GAAOW,EAElB,CAEA,OAAKJ,GAAQf,GAAa,CAACK,EAAY,MAAS,CAACL,KAC/CA,EAAY,GACZ,WAAW,IAAME,EAAiB,EAAG,CAAC,GAGjCe,CACT,CAEA,OAAOV,CACT,EChJA,GAAM,CAAE,KAAAa,EAAM,KAAAC,EAAM,MAAAC,EAAO,KAAAC,EAAM,KAAAC,EAAM,KAAAC,EAAM,KAAAC,GAAM,GAAAC,GAAI,KAAAC,GAAM,MAAAC,GAAO,MAAAC,GAAO,OAAAC,GAAQ,GAAAC,GAAI,GAAAC,GAAI,EAAAC,GAAG,MAAAC,GAAO,OAAAC,EAAO,EAAIC,EAE1GC,EAAQC,EAAY,CACxB,MAAO,CAAC,aAAa,CACvB,CAAC,EAEKC,GAASC,8JAETC,GAAMC,EACVvB,EAAK,CAAE,KAAM,QAAS,MAAOoB,EAAO,EAClCnB,EACEC,EAAMgB,EAAM,MAAM,aAAa,CAAC,CAAC,EACjCf,EAAK,CAAE,KAAM,WAAY,QAAS,qCAAsC,CAAC,EACzEY,GAAMS,CAAgB,EACtBpB,EAAK,CAAE,IAAK,OAAQ,KAAM,YAAa,KAAM,gBAAiB,MAAO,KAAM,CAAC,EAC5ED,EAAK,CAAE,KAAM,cAAe,QAAS,iBAAkB,CAAC,CAC1D,EACAE,EACEC,GACEC,GAAGW,EAAM,MAAM,aAAa,CAAC,CAAC,EAC9BV,GAAK,CACH,SAAwC,GAAK,CAC3C,EAAE,eAAe,EAEjBU,EAAM,MAAM,QAAQ,IAAI,SAAS,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,GAAK,EAAE,OAAO,MAAM,CAC5E,CACF,EACAT,GACE,0BACAC,GAAM,CACJ,KAAM,OACN,KAAM,MACR,CAAC,CACH,EACAC,GAAO,MAAM,CACb,EACA,iBAAoB,CAClB,cAAiBc,KAAgBP,EAC/B,MAAMN,GACJa,EAAa,MAAM,IAAI,CAACC,EAAMC,IAAMd,GAClC,GAAGa,KACHZ,GAAE,CACA,KAAM,IACN,QAAoCc,GAAK,CACvCA,EAAE,eAAe,EACjBH,EAAa,MAAM,OAAOE,EAAG,CAAC,CAChC,CACF,EAAG,GAAG,CACR,CAAC,CACH,CAEJ,CACF,EACA,CAAC,CAAC,WAAW,gBAAkBX,GAAO,CAAE,KAAM,QAAS,EAAG,WAAW,cAAc,CACrF,CACF,CACF,EAEaa,GAAW,SAAY,CAClC,MAAMC,EACNC,EAAOT,EAAG,EAEV,MAAM,IAAI,QAAQU,GAAW,WAAWA,EAAS,CAAC,CAAC,CACrD,EAEAH,GAAS",
  "names": ["s", "skruvKey", "keyed", "oldKeys", "listenersMap", "domCache", "render", "current", "currentNode", "parentNode", "isSvg", "forceFull", "_a", "_b", "_c", "_d", "_e", "_f", "txtNode", "_currentNode", "children", "attributes", "key", "listeners", "evt", "i", "keyedNode", "lastKeyCopy", "noChange", "k", "elementFactory", "_", "c", "resolveStyles", "promiseStyles", "resolve", "styleMap", "hash", "str", "i", "css", "strings", "keys", "_a", "stylesheet", "prev", "curr", "attrRe", "walkSelectorRe", "scopeRe", "consumeSelector", "raw", "prefix", "leftmost", "scope", "depth", "outer", "char", "match", "updateSelectorText", "selectorText", "found", "consumed", "upgradeRule", "rule", "l", "j", "retval", "sheet", "styleDoc", "styleElem", "e", "upgradedStyles", "cssTextGenerator", "resolveTimer", "cb", "createState", "stateObj", "Handler", "resolve", "target", "key", "value", "proxy", "booted", "acc", "curr", "_a", "res", "path", "item", "subProxy", "child", "newValue", "rootProxy", "hydrating", "generatorResults", "hydrationResolve", "hydrationPromise", "resolve", "waitingGens", "process", "value", "key", "parent", "cbparent", "result", "_a", "_b", "syncify", "root", "newValue", "newVal", "cb", "partialNewVal", "html", "head", "title", "meta", "link", "body", "main", "h1", "form", "label", "input", "button", "ol", "li", "a", "style", "script", "elementFactory", "state", "createState", "styles", "css", "dom", "syncify", "cssTextGenerator", "currentState", "todo", "i", "e", "doRender", "hydrationPromise", "render", "resolve"]
}
