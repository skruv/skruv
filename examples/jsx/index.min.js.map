{
  "version": 3,
  "sources": ["../../index.js", "../../utils/jsx-runtime.js", "index.jsx"],
  "sourcesContent": ["const s = Symbol.for('skruvDom')\n\nexport const h = (t, ...c) => ({\n  s,\n  t: t.toUpperCase(),\n  ...(\n    typeof c[0] === 'object' &&\n      !Array.isArray(c[0]) &&\n      !(c[0] instanceof Function) &&\n      !(c[0]?.[Symbol.asyncIterator]) &&\n      c[0]?.s !== s\n      ? {\n        a: c[0],\n        c: c.slice(1)\n      }\n      : {\n        a: {},\n        c: c\n      }\n  )\n})\n\nconst keyed = new WeakMap()\n\nconst domCache = {}\n\nexport const render = (\n  current,\n  _currentNode = globalThis.document.documentElement,\n  parentNode = _currentNode?.parentNode,\n  isSvg = false\n) => {\n  let currentNode = _currentNode\n  let childNodes = []\n  let nodeName = currentNode?.nodeName\n  if (!currentNode || (nodeName !== current.t && ((typeof current === 'string' || typeof current === 'number') && nodeName !== '#text'))) {\n    if (typeof current === 'string' || typeof current === 'number') {\n      currentNode = (domCache.text || (domCache.text = parentNode.ownerDocument.createTextNode(''))).cloneNode()\n    } else if (isSvg || current.t === 'svg') {\n      currentNode = (domCache[current.t] || (domCache[current.t] = parentNode.ownerDocument.createElementNS('http://www.w3.org/2000/svg', current.t))).cloneNode()\n    } else {\n      currentNode = (domCache[current.t] || (domCache[current.t] = parentNode.ownerDocument.createElement(current.t))).cloneNode()\n    }\n    if (_currentNode) {\n      parentNode.replaceChild(currentNode, _currentNode)\n    } else {\n      parentNode.appendChild(currentNode)\n    }\n  } else {\n    childNodes = Array.from(currentNode.childNodes)\n  }\n  if (typeof current === 'string' || typeof current === 'number') {\n    if (current.toString() !== currentNode.data.toString()) {\n      currentNode.data = current\n    }\n    return\n  }\n  if (current.s !== s) return\n  if (!current._r) current._r = {}\n  current._r._r = () => {\n    render(current, currentNode, parentNode, isSvg)\n    // TODO: Return false if element is not in DOM\n    return true\n  }\n  for (const key in current.a) {\n    if (key[0] === \"_\") continue\n    if (key[0] === \"o\" && key[1] === \"n\") {\n      if (!currentNode['data-event-' + key] || currentNode['data-event-' + key]?.toString() !== current.a[key]?.toString()) {\n        if (currentNode['data-event-' + key]) currentNode.removeEventListener(key.slice(2), currentNode['data-event-' + key])\n        currentNode.addEventListener(key.slice(2), current.a[key])\n        currentNode['data-event-' + key] = current.a[key]\n      } else if (!current.a[key]) {\n        currentNode.removeEventListener(key.slice(2), currentNode['data-event-' + key])\n      }\n    } else if (current.a[key] !== currentNode.getAttribute(key)) {\n      if (current.a[key]) {\n        currentNode.setAttribute(key, current.a[key])\n      } else {\n        currentNode.removeAttribute(key)\n      }\n    }\n  }\n  if (!current.c.length && childNodes.length) {\n    currentNode.replaceChildren()\n    return\n  }\n  if (childNodes.length > current.c.length) {\n    for (let i = current.c.length; i < childNodes.length; i++) {\n      currentNode.removeChild(childNodes[i])\n    }\n  }\n  for (let i = 0; i < current.c.length; i++) {\n    if (keyed.has(current.c[i])) {\n      const keyedNode = keyed.get(current.c[i])\n      if (keyedNode !== currentNode.childNodes[i]) {\n        if (keyedNode === currentNode.childNodes[i + 1]) {\n          currentNode.removeChild(currentNode.childNodes[i])\n        } else if (keyed.has(current.c[i + 1]) && keyed.get(current.c[i + 1]) === currentNode.childNodes[i]) {\n          currentNode.insertBefore(keyedNode, currentNode.childNodes[i])\n        } else if (currentNode.childNodes[i]) {\n          currentNode.replaceChild(keyedNode, currentNode.childNodes[i])\n        } else {\n          currentNode.appendChild(keyedNode)\n        }\n        keyed.set(current, currentNode)\n      }\n      continue\n    }\n    render(current.c[i], childNodes[i] || false, currentNode, isSvg)\n  }\n  keyed.set(current, currentNode)\n  return\n}\n\nexport const elementFactory = new Proxy({}, { get: (_, name) => (...c) => h(name, ...c) })", "/** @typedef {typeof import(\"../index.js\").Vnode} Vnode */\n/** @typedef {typeof import(\"../index.js\").VnodeAtrributes} VnodeAtrributes */\n\nimport { h } from '../index.js'\n\n/**\n * @typedef {Object} JSXAdditionalProperties\n * @property {[Vnode]} [children]\n *\n * @typedef {VnodeAtrributes & JSXAdditionalProperties} JSXAttributes\n */\n\n/**\n * @param {String} str\n * @returns {String}\n */\nconst kebabize = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase())\n\nexport const Fragment = '#fragment'\n\n/**\n * @param {String} nodeName\n * @param {JSXAttributes} [attributes={}]\n * @returns {Vnode | [Vnode?]}\n */\nexport const jsx = (nodeName, attributes = {}) => jsxs(nodeName, attributes)\n\n/**\n * @param {String} nodeName\n * @param {JSXAttributes} [attributes={}]\n * @returns {Vnode | [Vnode?]}\n */\nexport const jsxs = (nodeName, attributes = {}) => {\n  if (nodeName === Fragment && attributes.children) { return attributes.children }\n  if (nodeName === Fragment) { return [] }\n  const { children, ...attrs } = attributes\n  Object.keys(attrs).filter(e => e !== kebabize(e))\n    .forEach(e => {\n      attrs[kebabize(e)] = attrs[e]\n      delete attrs[e]\n    })\n  if (attrs['class-name']) {\n    attrs.class = attrs['class-name']\n    delete attrs['class-name']\n  }\n  if (attrs['html-for']) {\n    attrs.for = attrs['html-for']\n    delete attrs['html-for']\n  }\n  if (children) { return h(nodeName, attrs || {}, children) }\n  return h(nodeName, attrs || {})\n}\n", "import { render } from 'skruv'\n\nconst styles = /* css */`:root{color:#fff;background:#0f0f0f}`\n\nrender(\n  <html lang=\"en-US\">\n    {/* Fragments work too, but are usually not needed. */}\n    <>\n      <head>\n        <title>jsx</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <style>{styles}</style>\n      </head>\n    </>\n    <body>\n      <div>\n        <p>Hello world</p>\n      </div>\n    </body>\n  </html>\n)\n"],
  "mappings": "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",
  "names": ["s", "h", "t", "c", "_a", "_b", "keyed", "domCache", "render", "current", "_currentNode", "parentNode", "isSvg", "currentNode", "childNodes", "nodeName", "key", "i", "keyedNode", "elementFactory", "_", "name", "kebabize", "str", "$", "ofs", "Fragment", "jsx", "nodeName", "attributes", "jsxs", "children", "attrs", "e", "h", "styles", "render", "jsxs", "jsx", "Fragment"]
}
