{
  "version": 3,
  "sources": ["../../index.js", "../../utils/jsx-runtime.js", "index.jsx"],
  "sourcesContent": ["/**\n * @typedef {Vnode|string|Boolean|Number|Record<string,(string|boolean|Function|number|Object)> & {_r:{_r:() => boolean}?} & {oncreate:(e: Node) => void}?} SkruvChildNode\n * @typedef {SkruvChildNode[]} SkruvChildNodes\n * @typedef {Record<string,(string|boolean|Function|number|Object)>} VnodeAttributes\n */\n/**\n * @typedef {object} Vnode\n * @prop {Symbol} s\n * @prop {string} t\n * @prop {SkruvChildNodes} c\n * @prop {{_r:() => boolean}} [_r]\n */\nconst s = Symbol.for('skruvDom')\nconst skruvKey = 'data-skruv-key'\n/** @type {WeakMap<Vnode|Node, Node|Object>} */\nconst keyed = new WeakMap()\n/** @type {WeakMap<Node, Object>} */\nconst oldKeys = new WeakMap()\n/** @type {WeakMap<Node, Record<string, function|string|boolean|object>>} */\nconst listenersMap = new WeakMap()\n/** @type {Record<string, Node>} */\nconst domCache = {}\n/**\n * @param {Record<string, any>|Vnode|string|number|boolean} current\n * @param {Node} currentNode\n * @param {ParentNode?} parentNode\n * @param {boolean} isSvg\n */\nexport const render = (\n  current,\n  currentNode = globalThis.document.documentElement,\n  parentNode = currentNode.parentNode,\n  isSvg = false,\n  forceFull = false\n) => {\n  if (!parentNode) {\n    throw new Error('No parent to render to')\n  }\n  if (typeof current === 'boolean') {\n    if (currentNode) { parentNode.removeChild(currentNode) }\n    return\n  }\n  const txtNode = (typeof current === 'string' || typeof current === 'number')\n  if (\n    forceFull ||\n    !currentNode ||\n    (txtNode && currentNode?.nodeName !== '#text') ||\n    (!txtNode && currentNode?.nodeName.toLowerCase() !== current.t.toLowerCase())\n  ) {\n    const _currentNode = currentNode\n    if (txtNode) {\n      currentNode = document.createTextNode('' + current)\n    } else if (isSvg || current.t === 'svg') {\n      isSvg = true\n      currentNode = (domCache[current.t] || (domCache[current.t] = document.createElementNS('http://www.w3.org/2000/svg', current.t))).cloneNode(false)\n    } else {\n      currentNode = (domCache[current.t] || (domCache[current.t] = document.createElement(current.t))).cloneNode(false)\n    }\n    if (_currentNode) {\n      parentNode.replaceChild(currentNode, _currentNode)\n    } else {\n      parentNode.appendChild(currentNode)\n    }\n    if (txtNode) { return }\n    // eslint-disable-next-line no-unused-expressions\n    if (current.c[0]?.oncreate) { current?.c[0]?.oncreate(currentNode) }\n  }\n  if (txtNode) {\n    // eslint-disable-next-line eqeqeq\n    if (currentNode.textContent != current) { currentNode.textContent = '' + current }\n    return\n  }\n  if (current._r) {\n    current._r._r = () => {\n      if (!currentNode || !parentNode.contains(currentNode)) { return false }\n      render(current, currentNode, parentNode, isSvg)\n      return true\n    }\n  }\n  let children = current.c.flat(Infinity)\n  /** @type {Record<string, string|boolean|function|object>} */\n  let attributes = {}\n  if (children[0]?.constructor === Object && children[0]?.s !== s) {\n    attributes = children[0]\n    children = children.slice(1)\n    for (const key in attributes) {\n      if (key === skruvKey || key[0] === '_') { continue }\n      if (key[0] === 'o' && key[1] === 'n') {\n        let listeners = listenersMap.get(currentNode)\n        if (!listeners) {\n          listeners = {}\n          listenersMap.set(currentNode, listeners)\n        }\n        const evt = key.slice(2)\n        if (!listeners[key] || ('' + listeners[key]) !== ('' + attributes[key])) {\n          // @ts-ignore: TODO: TS does not think Function is compatible with EventListenerOrEventListenerObject\n          if (listeners[key]) { currentNode.removeEventListener(evt, listeners[key]) }\n          // @ts-ignore: TODO: TS does not think Function is compatible with EventListenerOrEventListenerObject\n          currentNode.addEventListener(evt, attributes[key])\n          listeners[key] = attributes[key]\n        } else if (!attributes[key]) {\n          // @ts-ignore: TODO: TS does not think Function is compatible with EventListenerOrEventListenerObject\n          currentNode.removeEventListener(evt, listeners[key])\n        }\n        // @ts-ignore: TODO: TS does not like that currentNode \"might\" be a Node here, but since we do checking for text nodes above it is a Element\n      } else if (attributes[key] !== currentNode.getAttribute(key)) {\n        if (\n          (key === 'checked' || key === 'selected' || key === 'value') ||\n          typeof attributes[key] === 'object' // Support complex data passing for custom elements\n        ) {\n          // @ts-ignore: TODO: TS does not like indexing elements with strings, but in this case we need to to set special props. Could be fixed with excessive checking, but that'd slow down perf\n          currentNode[key] = attributes[key]\n        }\n        if (attributes[key]) {\n          // @ts-ignore: TODO: TS does not like that currentNode \"might\" be a Node here, but since we do checking for text nodes above it is a Element\n          currentNode.setAttribute(key, '' + attributes[key])\n        } else {\n          // @ts-ignore: TODO: TS does not like that currentNode \"might\" be a Node here, but since we do checking for text nodes above it is a Element\n          currentNode.removeAttribute(key)\n        }\n      }\n    }\n  }\n  if (!children.length && currentNode.childNodes.length) {\n    if (attributes['data-skruv-wait-for-not-empty']) {\n      return\n    }\n    // @ts-ignore: TODO: TS does not like that currentNode \"might\" be a Node here, but since we do checking for text nodes above it is a Element\n    currentNode.replaceChildren()\n    return\n  }\n  if (currentNode.childNodes.length > children.length) {\n    for (let i = children.length; i < currentNode.childNodes.length; i++) {\n      currentNode.removeChild(currentNode.childNodes[i])\n    }\n  }\n  for (let i = 0; i < children.length; i++) {\n    let forceFull = false\n    /** @type {Element} */\n    let keyedNode\n    if (children[i].constructor === Object) {\n      // @ts-ignore: A key in the keyed map only points to actual Elements.\n      keyedNode = keyed.get(children[i].c[0]?.[skruvKey])\n      if (keyedNode) {\n        if (keyedNode !== currentNode.childNodes[i]) {\n          if (keyedNode === currentNode.childNodes[i + 1]) {\n            currentNode.removeChild(currentNode.childNodes[i])\n          } else if (keyed.get(children[i + 1]?.c?.[0]?.[skruvKey]) === currentNode.childNodes[i]) {\n            currentNode.insertBefore(keyedNode, currentNode.childNodes[i])\n          } else if (currentNode.childNodes[i]) {\n            currentNode.replaceChild(keyedNode, currentNode.childNodes[i])\n          } else {\n            currentNode.appendChild(keyedNode)\n          }\n        }\n        forceFull = children[i].c[0][skruvKey] !== oldKeys.get(currentNode.childNodes[i])\n        if (!forceFull) {\n          const lastKeyCopy = keyed.get(currentNode.childNodes[i])\n          if (lastKeyCopy) {\n            let noChange = true\n            for (const k in children[i].c[0][skruvKey]) {\n              // @ts-ignore: oldKey might be undefinded\n              if (children[i].c[0][skruvKey][k] !== lastKeyCopy[k]) {\n                noChange = false\n              }\n            }\n            if (noChange) { continue }\n          }\n        }\n      } else {\n        forceFull = keyed.has(currentNode.childNodes[i])\n      }\n    }\n    // @ts-ignore: TODO: TS does not like that currentNode \"might\" be a Node here, but since we do checking for text nodes above it is a Element\n    render(children[i], currentNode.childNodes[i] || false, currentNode, isSvg, forceFull)\n  }\n  if (attributes[skruvKey]) {\n    // @ts-ignore: TODO: The skruvkey is always an object here, but clarify the types for the attributes a bit more\n    keyed.set(attributes[skruvKey], currentNode)\n    oldKeys.set(currentNode, attributes[skruvKey])\n    // @ts-ignore: TODO: The skruvkey is always an object here, but clarify the types for the attributes a bit more\n    keyed.set(currentNode, { ...attributes[skruvKey] })\n  }\n}\n\n/** @type {Record<string, (...c: Array<Record<string, any>|Vnode|string|number|boolean>) => Vnode>} */\nexport const elementFactory = new Proxy({}, { get: (_, t) => (/** @type {Array<Record<string, any>|Vnode|string|number|boolean>} */ ...c) => ({ s, t, c }) })\n\n/**\n * @param {string} t\n * @param  {...Array<Record<string, any>|Vnode|string|number|boolean>} c\n * @returns {Vnode}\n */\n// @ts-ignore: TODO: Check why c is being complained about here\nexport const h = (t, ...c) => ({ s, t, c })\n", "// @ts-nocheck\n/**\n * @typedef {Vnode|string|Boolean|Number|Record<string,(string|boolean|Function|number|Object)> & {_r:{_r:() => boolean}?} & {oncreate:(e: Node) => void}?} SkruvChildNode\n * @typedef {SkruvChildNode[]} SkruvChildNodes\n * @typedef {Record<string,(string|boolean|Function|number|Object)>} VnodeAttributes\n */\n/**\n * @typedef {object} Vnode\n * @prop {Symbol} s\n * @prop {string} t\n * @prop {SkruvChildNodes} c\n * @prop {{_r:() => boolean}} [_r]\n */\nimport { h } from '../index.js'\n\n/**\n * @param {String} str\n * @returns {String}\n */\nconst kebabize = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase())\n\nexport const Fragment = '#fragment'\n\n/**\n * @param {String} nodeName\n * @param {VnodeAttributes} [attributes={}]\n * @returns {Vnode | []}\n */\nexport const jsx = (nodeName, attributes = {}) => jsxs(nodeName, attributes)\n\n/**\n * @param {String} nodeName\n * @param {VnodeAttributes} [attributes={}]\n * @returns {Vnode | []}\n */\nexport const jsxs = (nodeName, attributes = {}) => {\n  if (nodeName === Fragment && attributes.children) { return attributes.children }\n  if (nodeName === Fragment) { return [] }\n  const { children, ...attrs } = attributes\n  Object.keys(attrs).filter(e => e !== kebabize(e))\n    .forEach(e => {\n      attrs[kebabize(e)] = attrs[e]\n      delete attrs[e]\n    })\n  if (attrs['class-name']) {\n    attrs.class = attrs['class-name']\n    delete attrs['class-name']\n  }\n  if (attrs['html-for']) {\n    attrs.for = attrs['html-for']\n    delete attrs['html-for']\n  }\n  if (children) { return h(nodeName, attrs || {}, children) }\n  return h(nodeName, attrs || {})\n}\n", "import { render } from 'skruv'\n\nconst styles = /* css */`:root{color:#fff;background:#0f0f0f}`\n\nrender(\n  <html lang=\"en-US\">\n    {/* Fragments work too, but are usually not needed. */}\n    <>\n      <head>\n        <title>jsx</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <style>{styles}</style>\n      </head>\n    </>\n    <body>\n      <div>\n        <p>Hello world</p>\n      </div>\n    </body>\n  </html>\n)\n"],
  "mappings": "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",
  "names": ["s", "skruvKey", "keyed", "oldKeys", "listenersMap", "domCache", "render", "current", "currentNode", "parentNode", "isSvg", "forceFull", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "txtNode", "_currentNode", "children", "attributes", "key", "listeners", "evt", "i", "keyedNode", "lastKeyCopy", "noChange", "k", "elementFactory", "_", "t", "c", "h", "kebabize", "str", "$", "ofs", "Fragment", "jsx", "nodeName", "attributes", "jsxs", "children", "attrs", "e", "h", "styles", "render", "jsxs", "jsx", "Fragment"]
}
