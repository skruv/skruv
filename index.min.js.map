{
  "version": 3,
  "sources": ["index.js"],
  "sourcesContent": ["// @ts-nocheck\n/**\n * @typedef {Vnode|Vnode[]|String|Boolean|Number|Record<string,(string|boolean|Function|number|Object)> & {_r:{_r:() => boolean}?}} SkruvChildNode\n * @typedef {SkruvChildNode[]} SkruvChildNodes\n * @typedef {Record<string,(string|boolean|Function|number|Object)>} VnodeAttributes\n */\n/**\n * @typedef {object} Vnode\n * @prop {Symbol} s\n * @prop {String} t\n * @prop {SkruvChildNodes} c\n * @prop {{_r:() => boolean}} [_r]\n */\nconst s = Symbol.for('skruvDom')\nconst skruvKey = 'data-skruv-key'\n/** @type {WeakMap<Vnode, Node>} */\nconst keyed = new WeakMap()\n/** @type {WeakMap<Vnode, Node>} */\nconst oldKeys = new WeakMap()\n/** @type {WeakMap<Vnode, Record<string, function>>} */\nconst listenersMap = new WeakMap()\n/** @type {Record<string, Node>} */\nconst domCache = {}\n/**\n * @param {Vnode} current\n * @param {Node} currentNode\n * @param {ParentNode?} parentNode\n * @param {boolean} isSvg\n */\nexport const render = (\n  current,\n  currentNode = globalThis.document.documentElement,\n  parentNode = currentNode.parentNode,\n  isSvg = false,\n  forceFull = false\n) => {\n  if (typeof current === 'boolean') {\n    if (currentNode) { parentNode.removeChild(currentNode) }\n    return\n  }\n  const txtNode = (typeof current === 'string' || typeof current === 'number')\n  if (\n    forceFull ||\n    !currentNode ||\n    (\n      txtNode &&\n      currentNode?.nodeName !== '#text'\n    ) ||\n    (\n      !txtNode &&\n      currentNode?.nodeName.toLowerCase() !== current.t.toLowerCase()\n    )\n  ) {\n    const _currentNode = currentNode\n    if (txtNode) {\n      currentNode = document.createTextNode(current)\n    } else if (isSvg || current.t === 'svg') {\n      isSvg = true\n      currentNode = (domCache[current.t] || (domCache[current.t] = document.createElementNS('http://www.w3.org/2000/svg', current.t))).cloneNode(false)\n    } else {\n      currentNode = (domCache[current.t] || (domCache[current.t] = document.createElement(current.t))).cloneNode(false)\n    }\n    if (_currentNode) {\n      parentNode.replaceChild(currentNode, _currentNode)\n    } else {\n      parentNode.appendChild(currentNode)\n    }\n    if (txtNode) { return }\n    // eslint-disable-next-line no-unused-expressions\n    if (current.c[0]?.oncreate) { current?.c[0]?.oncreate(currentNode) }\n  }\n  if (txtNode) {\n    // eslint-disable-next-line eqeqeq\n    if (currentNode.data != current) { currentNode.data = current }\n    return\n  }\n  if (current._r) {\n    current._r._r = () => {\n      if (!currentNode || !parentNode.contains(currentNode)) { return false }\n      render(current, currentNode, parentNode, isSvg)\n      return true\n    }\n  }\n  let children = current.c.flat(Infinity)\n  let attributes = {}\n  if (children[0]?.constructor === Object && children[0]?.s !== s) {\n    attributes = children[0]\n    children = children.slice(1)\n    for (const key in attributes) {\n      if (key === skruvKey || key[0] === '_') { continue }\n      if (key[0] === 'o' && key[1] === 'n') {\n        let listeners = listenersMap.get(currentNode)\n        if (!listeners) { listeners = {} && listenersMap.set(currentNode, listeners) }\n        const evt = key.slice(2)\n        if (!listenersMap[key] || listenersMap[key] !== attributes[key]) {\n          if (listenersMap[key]) { currentNode.removeEventListener(evt, listenersMap[key]) }\n          currentNode.addEventListener(evt, attributes[key])\n          listenersMap[key] = attributes[key]\n        } else if (!attributes[key]) {\n          currentNode.removeEventListener(evt, listenersMap[key])\n        }\n      } else if (attributes[key] !== currentNode.getAttribute(key)) {\n        if (\n          (key === 'checked' || key === 'selected' || key === 'value') ||\n          typeof attributes[key] === 'object' // Support complex data passing for custom elements\n        ) {\n          currentNode[key] = attributes[key]\n        }\n        if (attributes[key]) {\n          currentNode.setAttribute(key, '' + attributes[key])\n        } else {\n          currentNode.removeAttribute(key)\n        }\n      }\n    }\n  }\n  if (!children.length && currentNode.childNodes.length) {\n    if (attributes['data-skruv-wait-for-not-empty']) {\n      return\n    }\n    currentNode.replaceChildren()\n    return\n  }\n  if (currentNode.childNodes.length > children.length) {\n    for (let i = children.length; i < currentNode.childNodes.length; i++) {\n      currentNode.removeChild(currentNode.childNodes[i])\n    }\n  }\n  for (let i = 0; i < children.length; i++) {\n    let forceFull = false\n    let keyedNode\n    if (children[i].constructor === Object) {\n      keyedNode = keyed.get(children[i].c[0]?.[skruvKey])\n      if (keyedNode) {\n        if (keyedNode !== currentNode.childNodes[i]) {\n          if (keyedNode === currentNode.childNodes[i + 1]) {\n            currentNode.removeChild(currentNode.childNodes[i])\n          } else if (keyed.get(children[i + 1]?.c?.[0]?.[skruvKey]) === currentNode.childNodes[i]) {\n            currentNode.insertBefore(keyedNode, currentNode.childNodes[i])\n          } else if (currentNode.childNodes[i]) {\n            currentNode.replaceChild(keyedNode, currentNode.childNodes[i])\n          } else {\n            currentNode.appendChild(keyedNode)\n          }\n        }\n        forceFull = children[i].c[0][skruvKey] !== oldKeys.get(currentNode.childNodes[i])\n        if (!forceFull) {\n          const oldKey = keyed.get(currentNode.childNodes[i])\n          let noChange = true\n          for (const k in children[i].c[0][skruvKey]) { if (children[i].c[0][skruvKey][k] !== oldKey[k]) { noChange = false } }\n          if (noChange) { continue }\n        }\n      } else {\n        forceFull = keyed.has(currentNode.childNodes[i])\n      }\n    }\n    render(children[i], currentNode.childNodes[i] || false, currentNode, isSvg, forceFull)\n  }\n  if (attributes[skruvKey]) {\n    keyed.set(attributes[skruvKey], currentNode)\n    oldKeys.set(currentNode, attributes[skruvKey])\n    keyed.set(currentNode, { ...attributes[skruvKey] })\n  }\n}\n\nexport const elementFactory = new Proxy({}, {\n  /** @type {(_: any, name: string) => (arg0: (Record<string, any>|Vnode)[]) => Vnode} */\n  get: (_, t) => (...c) => ({ s, t, c })\n})\n\n/**\n * @param {string} t\n * @param  {(Record<string, any>|Vnode)[]} c\n * @returns {Vnode}\n */\nexport const h = (t, ...c) => ({ s, t, c })\n"],
  "mappings": "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",
  "names": ["s", "skruvKey", "keyed", "oldKeys", "listenersMap", "domCache", "render", "current", "currentNode", "parentNode", "isSvg", "forceFull", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "txtNode", "_currentNode", "children", "attributes", "key", "listeners", "evt", "keyedNode", "oldKey", "noChange", "k", "elementFactory", "_", "t", "c", "h"]
}
