{
  "version": 3,
  "sources": ["../../node_modules/skruv/skruv.js", "../../node_modules/@skruv/jsx/jsx-runtime.ts", "index.tsx"],
  "sourcesContent": ["const htmlNS = 'http://www.w3.org/1999/xhtml'\n/** @type {import(\"./utilityTypes\").keyedMap} */\nconst keyed = new WeakMap()\n/** @type {import(\"./utilityTypes\").oldKeysMap} */\nconst oldKeys = new WeakMap()\n/** @type {import(\"./utilityTypes\").attributesMap} */\nconst attributesMap = new WeakMap()\n/** @type {import(\"./utilityTypes\").domCacheObj} */\nconst domCache = {}\n/**\n * @param {import(\"./utilityTypes\").Vnode} current\n * @param {import(\"./utilityTypes\").AnyRealElement} currentNode\n * @param {ParentNode?} parentNode\n * @param {string} ns\n */\nexport const render = (\n  current,\n  // @ts-expect-error\n  currentNode = globalThis.document.documentElement,\n  // @ts-expect-error\n  parentNode = currentNode.parentNode,\n  ns = htmlNS,\n  forceFull = false\n) => {\n  if (!parentNode) {\n    throw new Error('No parent to render to')\n  }\n  if (typeof current === 'boolean') {\n    // @ts-expect-error\n    if (currentNode) { parentNode.removeChild(currentNode) }\n    return\n  }\n  if (!globalThis?.isSkruvSSR && current?.t?.toLowerCase() === 'skruvtext' && current?.c?.[0]) {\n    current.r = () => {\n      // @ts-expect-error\n      if (!currentNode || !parentNode.contains(currentNode)) { return false }\n      render(current, currentNode, parentNode, ns)\n      return true\n    }\n    // @ts-expect-error\n    render(current?.c?.[0], currentNode)\n    return\n  }\n  const txtNode = (typeof current === 'string' || typeof current === 'number')\n  if (\n    forceFull ||\n    !currentNode ||\n    (txtNode && currentNode.nodeName !== '#text') ||\n    (!txtNode && currentNode.nodeName.toLowerCase() !== current.t.toLowerCase())\n  ) {\n    const _currentNode = currentNode\n    if (txtNode) {\n      // @ts-expect-error: When this is a textnode we will only use it for text, so this should be fine\n      currentNode = document.createTextNode('' + current)\n    } else {\n      if (current.t === 'svg') { ns = 'http://www.w3.org/2000/svg' }\n      if (current.t === 'math') { ns = 'http://www.w3.org/1998/Math/MathML' }\n      if (current.t === 'feed') { ns = 'http://www.w3.org/2005/Atom' }\n      if (current.t === 'urlset' || current.t === 'sitemapindex') { ns = 'https://www.sitemaps.org/schemas/sitemap/0.9' }\n      // @ts-expect-error: All the nodes are actually elements, since the domCache only contains elements\n      currentNode = (domCache[current.t] || (domCache[current.t] = document.createElementNS(ns, current.t))).cloneNode(false)\n    }\n    if (_currentNode) {\n      // @ts-expect-error\n      parentNode.replaceChild(currentNode, _currentNode)\n    } else {\n      // @ts-expect-error\n      parentNode.appendChild(currentNode)\n    }\n    if (txtNode) { return }\n  }\n  if (txtNode) {\n    // We do a loose comparison to allow for numbers\n    // eslint-disable-next-line eqeqeq\n    if (currentNode.textContent != current) { currentNode.textContent = '' + current }\n    return\n  }\n  if (current.r) {\n    current.r = () => {\n      // @ts-expect-error\n      if (!currentNode || !parentNode.contains(currentNode)) { return false }\n      render(current, currentNode, parentNode, ns)\n      return true\n    }\n  }\n  // This needs to come after the .r callback is registered since it should apply to child nodes, not the current node.\n  if (current.t === 'foreignObject') { ns = htmlNS }\n  /** @type {import(\"./utilityTypes\").Vnode[]} */\n  // @ts-expect-error\n  let children = current.c.flat(Infinity)\n  if (!globalThis?.isSkruvSSR) { children = children.filter(c => !c?.t?.startsWith('skruv')) }\n  /** @type {import(\"./utilityTypes\").attributes} */\n  // @ts-expect-error\n  let attributes = {}\n  if (children[0]?.constructor === Object && !children[0]?.isSkruvDom) {\n    // @ts-expect-error\n    attributes = children[0]\n    children = children.slice(1)\n    let oldAttributes = attributesMap.get(currentNode)\n    if (!oldAttributes) {\n      oldAttributes = {}\n      attributesMap.set(currentNode, oldAttributes)\n    }\n    for (const [key, value] of Object.entries(attributes)) {\n      if (('' + oldAttributes[key]) === ('' + value)) { continue }\n      if (key === 'skruvAfterCreate') {\n        // Run after we have processed all the attributes and children\n        setTimeout(() => value(currentNode), 0)\n        oldAttributes[key] = value\n        continue\n      }\n      if (key.startsWith('skruv')) { continue }\n      if (key[0] === 'o' && key[1] === 'n') {\n        const evt = key.slice(2)\n        if (!oldAttributes[key]) {\n          if (oldAttributes[key]) { currentNode.removeEventListener(evt, value) }\n          currentNode.addEventListener(evt, value)\n        } else if (!value) {\n          currentNode.removeEventListener(evt, value)\n        }\n        oldAttributes[key] = value\n        continue\n      }\n      if (\n        (key === 'checked' || key === 'selected' || key === 'value') ||\n        currentNode.nodeName.includes('-') // Support complex data passing for custom elements\n      ) {\n        // @ts-expect-error We have to index the element for custom elements or setting checked/selected/value\n        currentNode[key] = value\n      }\n      if (value !== undefined) {\n        currentNode.setAttribute(key, '' + value)\n      } else {\n        currentNode.removeAttribute(key)\n      }\n      oldAttributes[key] = value\n    }\n  }\n  for (const key of currentNode.getAttributeNames().filter(e => !Object.keys(attributes).includes(e))) {\n    currentNode.removeAttribute(key)\n  }\n  if (!children.length && currentNode.childNodes.length) {\n    if (attributes.skruvWaitForNotEmpty) {\n      return\n    }\n    currentNode.replaceChildren()\n    return\n  }\n  if (currentNode.childNodes.length > children.length) {\n    for (let i = (currentNode.childNodes.length - 1); i >= children.length; i--) {\n      currentNode.removeChild(currentNode.childNodes[i])\n    }\n  }\n  for (let i = 0; i < children.length; i++) {\n    let forceFull = false\n    /** @type {Element} */\n    let keyedNode\n    if (children[i]?.c) {\n      // @ts-expect-error\n      keyedNode = keyed.get(children[i].c[0]?.skruvKey)\n      if (keyedNode) {\n        // @ts-expect-error\n        if (keyedNode !== currentNode.childNodes[i]) {\n          // @ts-expect-error\n          if (keyedNode === currentNode.childNodes[i + 1]) {\n            currentNode.removeChild(currentNode.childNodes[i])\n          // @ts-expect-error\n          } else if (currentNode.childNodes[i] && keyed.get(children[i + 1]?.c?.[0]?.skruvKey) === currentNode.childNodes[i]) {\n            // @ts-expect-error\n            currentNode.insertBefore(keyedNode, currentNode.childNodes[i])\n          } else if (currentNode.childNodes[i]) {\n            // @ts-expect-error\n            currentNode.replaceChild(keyedNode, currentNode.childNodes[i])\n          } else {\n            // @ts-expect-error\n            currentNode.appendChild(keyedNode)\n          }\n        }\n        // @ts-expect-error\n        forceFull = children[i].c[0].skruvKey !== oldKeys.get(currentNode.childNodes[i])\n        if (!forceFull) {\n          const lastKeyCopy = keyed.get(currentNode.childNodes[i])\n          if (lastKeyCopy) {\n            let noChange = true\n            // @ts-expect-error\n            for (const k in children[i].c[0].skruvKey) {\n              // @ts-expect-error\n              if (children[i].c[0].skruvKey[k] !== lastKeyCopy[k]) {\n                noChange = false\n              }\n            }\n            if (noChange) { continue }\n          }\n        }\n      } else {\n        forceFull = keyed.has(currentNode.childNodes[i])\n      }\n    }\n    // @ts-expect-error: This will be fine since if the node is of the wrong type a new one is created\n    render(children[i], currentNode.childNodes[i] || false, currentNode, ns, forceFull)\n  }\n  if (attributes.skruvKey) {\n    keyed.set(attributes.skruvKey, currentNode)\n    oldKeys.set(currentNode, attributes.skruvKey)\n    keyed.set(currentNode, { ...attributes.skruvKey })\n  }\n}\n\n/** @type {import(\"./utilityTypes\").ElementMap} */ // @ts-expect-error\nexport const elementFactory = new Proxy({}, { get: (_, t) => (...c) => ({ isSkruvDom: true, t, c }) })\n", "import * as util from 'skruv/utilityTypes'\n\nexport namespace JSX {\n  export interface IntrinsicElements {\n    'html': util.SkruvHtmlHTMLAttributes\n    'base': util.SkruvBaseHTMLAttributes\n    'head': util.SkruvHeadHTMLAttributes\n    'title': util.SkruvTitleHTMLAttributes\n    'script': util.SkruvScriptHTMLAttributes\n    'style': util.SkruvStyleHTMLAttributes\n    'link': util.SkruvLinkHTMLAttributes\n    'meta': util.SkruvMetaHTMLAttributes\n    'body': util.SkruvBodyHTMLAttributes\n    'address': util.SkruvAddressHTMLAttributes\n    'article': util.SkruvArticleHTMLAttributes\n    'aside': util.SkruvAsideHTMLAttributes\n    'footer': util.SkruvFooterHTMLAttributes\n    'h1': util.SkruvH1HTMLAttributes\n    'h2': util.SkruvH2HTMLAttributes\n    'h3': util.SkruvH3HTMLAttributes\n    'h4': util.SkruvH4HTMLAttributes\n    'h5': util.SkruvH5HTMLAttributes\n    'h6': util.SkruvH6HTMLAttributes\n    'header': util.SkruvHeaderHTMLAttributes\n    'hgroup': util.SkruvHgroupHTMLAttributes\n    'main': util.SkruvMainHTMLAttributes\n    'nav': util.SkruvNavHTMLAttributes\n    'section': util.SkruvSectionHTMLAttributes\n    'search': util.SkruvSearchHTMLAttributes\n    'blockquote': util.SkruvBlockquoteHTMLAttributes\n    'cite': util.SkruvCiteHTMLAttributes\n    'dd': util.SkruvDdHTMLAttributes\n    'dt': util.SkruvDtHTMLAttributes\n    'dl': util.SkruvDlHTMLAttributes\n    'div': util.SkruvDivHTMLAttributes\n    'figcaption': util.SkruvFigcaptionHTMLAttributes\n    'figure': util.SkruvFigureHTMLAttributes\n    'hr': util.SkruvHrHTMLAttributes\n    'li': util.SkruvLiHTMLAttributes\n    'ol': util.SkruvOlHTMLAttributes\n    'ul': util.SkruvUlHTMLAttributes\n    'menu': util.SkruvMenuHTMLAttributes\n    'p': util.SkruvPHTMLAttributes\n    'pre': util.SkruvPreHTMLAttributes\n    'a': util.SkruvAHTMLAttributes\n    'abbr': util.SkruvAbbrHTMLAttributes\n    'b': util.SkruvBHTMLAttributes\n    'bdi': util.SkruvBdiHTMLAttributes\n    'bdo': util.SkruvBdoHTMLAttributes\n    'br': util.SkruvBrHTMLAttributes\n    'code': util.SkruvCodeHTMLAttributes\n    'data': util.SkruvDataHTMLAttributes\n    'dfn': util.SkruvDfnHTMLAttributes\n    'em': util.SkruvEmHTMLAttributes\n    'i': util.SkruvIHTMLAttributes\n    'kbd': util.SkruvKbdHTMLAttributes\n    'mark': util.SkruvMarkHTMLAttributes\n    'q': util.SkruvQHTMLAttributes\n    'rp': util.SkruvRpHTMLAttributes\n    'ruby': util.SkruvRubyHTMLAttributes\n    'rt': util.SkruvRtHTMLAttributes\n    's': util.SkruvSHTMLAttributes\n    'samp': util.SkruvSampHTMLAttributes\n    'small': util.SkruvSmallHTMLAttributes\n    'span': util.SkruvSpanHTMLAttributes\n    'strong': util.SkruvStrongHTMLAttributes\n    'sub': util.SkruvSubHTMLAttributes\n    'sup': util.SkruvSupHTMLAttributes\n    'time': util.SkruvTimeHTMLAttributes\n    'u': util.SkruvUHTMLAttributes\n    'var': util.SkruvVarHTMLAttributes\n    'wbr': util.SkruvWbrHTMLAttributes\n    'area': util.SkruvAreaHTMLAttributes\n    'audio': util.SkruvAudioHTMLAttributes\n    'img': util.SkruvImgHTMLAttributes\n    'map': util.SkruvMapHTMLAttributes\n    'track': util.SkruvTrackHTMLAttributes\n    'video': util.SkruvVideoHTMLAttributes\n    'embed': util.SkruvEmbedHTMLAttributes\n    'iframe': util.SkruvIframeHTMLAttributes\n    'object': util.SkruvObjectHTMLAttributes\n    'picture': util.SkruvPictureHTMLAttributes\n    'source': util.SkruvSourceHTMLAttributes\n    'portal': util.SkruvPortalHTMLAttributes\n    'canvas': util.SkruvCanvasHTMLAttributes\n    'noscript': util.SkruvNoscriptHTMLAttributes\n    'del': util.SkruvDelHTMLAttributes\n    'ins': util.SkruvInsHTMLAttributes\n    'caption': util.SkruvCaptionHTMLAttributes\n    'col': util.SkruvColHTMLAttributes\n    'colgroup': util.SkruvColgroupHTMLAttributes\n    'table': util.SkruvTableHTMLAttributes\n    'tbody': util.SkruvTbodyHTMLAttributes\n    'tr': util.SkruvTrHTMLAttributes\n    'td': util.SkruvTdHTMLAttributes\n    'tfoot': util.SkruvTfootHTMLAttributes\n    'th': util.SkruvThHTMLAttributes\n    'thead': util.SkruvTheadHTMLAttributes\n    'button': util.SkruvButtonHTMLAttributes\n    'datalist': util.SkruvDatalistHTMLAttributes\n    'option': util.SkruvOptionHTMLAttributes\n    'fieldset': util.SkruvFieldsetHTMLAttributes\n    'label': util.SkruvLabelHTMLAttributes\n    'form': util.SkruvFormHTMLAttributes\n    'input': util.SkruvInputHTMLAttributes\n    'legend': util.SkruvLegendHTMLAttributes\n    'meter': util.SkruvMeterHTMLAttributes\n    'optgroup': util.SkruvOptgroupHTMLAttributes\n    'select': util.SkruvSelectHTMLAttributes\n    'output': util.SkruvOutputHTMLAttributes\n    'progress': util.SkruvProgressHTMLAttributes\n    'textarea': util.SkruvTextareaHTMLAttributes\n    'details': util.SkruvDetailsHTMLAttributes\n    'summary': util.SkruvSummaryHTMLAttributes\n    'dialog': util.SkruvDialogHTMLAttributes\n    'slot': util.SkruvSlotHTMLAttributes\n    'template': util.SkruvTemplateHTMLAttributes\n    'svgA': util.SkruvASVGAttributes\n    'animate': util.SkruvAnimateSVGAttributes\n    'animateMotion': util.SkruvAnimatemotionSVGAttributes\n    'animateTransform': util.SkruvAnimatetransformSVGAttributes\n    'circle': util.SkruvCircleSVGAttributes\n    'clipPath': util.SkruvClippathSVGAttributes\n    'defs': util.SkruvDefsSVGAttributes\n    'desc': util.SkruvDescSVGAttributes\n    'ellipse': util.SkruvEllipseSVGAttributes\n    'feBlend': util.SkruvFeblendSVGAttributes\n    'feColorMatrix': util.SkruvFecolormatrixSVGAttributes\n    'feComponentTransfer': util.SkruvFecomponenttransferSVGAttributes\n    'feComposite': util.SkruvFecompositeSVGAttributes\n    'feConvolveMatrix': util.SkruvFeconvolvematrixSVGAttributes\n    'feDiffuseLighting': util.SkruvFediffuselightingSVGAttributes\n    'feDisplacementMap': util.SkruvFedisplacementmapSVGAttributes\n    'feDistantLight': util.SkruvFedistantlightSVGAttributes\n    'feDropShadow': util.SkruvFedropshadowSVGAttributes\n    'feFlood': util.SkruvFefloodSVGAttributes\n    'feFuncA': util.SkruvFefuncaSVGAttributes\n    'feFuncB': util.SkruvFefuncbSVGAttributes\n    'feFuncG': util.SkruvFefuncgSVGAttributes\n    'feFuncR': util.SkruvFefuncrSVGAttributes\n    'feGaussianBlur': util.SkruvFegaussianblurSVGAttributes\n    'feImage': util.SkruvFeimageSVGAttributes\n    'feMerge': util.SkruvFemergeSVGAttributes\n    'feMergeNode': util.SkruvFemergenodeSVGAttributes\n    'feMorphology': util.SkruvFemorphologySVGAttributes\n    'feOffset': util.SkruvFeoffsetSVGAttributes\n    'fePointLight': util.SkruvFepointlightSVGAttributes\n    'feSpecularLighting': util.SkruvFespecularlightingSVGAttributes\n    'feSpotLight': util.SkruvFespotlightSVGAttributes\n    'feTile': util.SkruvFetileSVGAttributes\n    'feTurbulence': util.SkruvFeturbulenceSVGAttributes\n    'filter': util.SkruvFilterSVGAttributes\n    'foreignObject': util.SkruvForeignobjectSVGAttributes\n    'g': util.SkruvGSVGAttributes\n    'image': util.SkruvImageSVGAttributes\n    'line': util.SkruvLineSVGAttributes\n    'linearGradient': util.SkruvLineargradientSVGAttributes\n    'marker': util.SkruvMarkerSVGAttributes\n    'mask': util.SkruvMaskSVGAttributes\n    'metadata': util.SkruvMetadataSVGAttributes\n    'mpath': util.SkruvMpathSVGAttributes\n    'path': util.SkruvPathSVGAttributes\n    'pattern': util.SkruvPatternSVGAttributes\n    'polygon': util.SkruvPolygonSVGAttributes\n    'polyline': util.SkruvPolylineSVGAttributes\n    'radialGradient': util.SkruvRadialgradientSVGAttributes\n    'rect': util.SkruvRectSVGAttributes\n    'svgScript': util.SkruvScriptSVGAttributes\n    'set': util.SkruvSetSVGAttributes\n    'stop': util.SkruvStopSVGAttributes\n    'svgStyle': util.SkruvStyleSVGAttributes\n    'svg': util.SkruvSvgSVGAttributes\n    'switch': util.SkruvSwitchSVGAttributes\n    'symbol': util.SkruvSymbolSVGAttributes\n    'text': util.SkruvTextSVGAttributes\n    'textPath': util.SkruvTextpathSVGAttributes\n    'svgTitle': util.SkruvTitleSVGAttributes\n    'tspan': util.SkruvTspanSVGAttributes\n    'use': util.SkruvUseSVGAttributes\n    'view': util.SkruvViewSVGAttributes\n    'math': util.SkruvMathMathMLAttributes\n    'semantics': util.SkruvSemanticsMathMLAttributes\n    'menclose': util.SkruvMencloseMathMLAttributes\n    'merror': util.SkruvMerrorMathMLAttributes\n    'mfrac': util.SkruvMfracMathMLAttributes\n    'mi': util.SkruvMiMathMLAttributes\n    'mmultiscripts': util.SkruvMmultiscriptsMathMLAttributes\n    'mn': util.SkruvMnMathMLAttributes\n    'mo': util.SkruvMoMathMLAttributes\n    'mover': util.SkruvMoverMathMLAttributes\n    'mpadded': util.SkruvMpaddedMathMLAttributes\n    'mphantom': util.SkruvMphantomMathMLAttributes\n    'mroot': util.SkruvMrootMathMLAttributes\n    'mrow': util.SkruvMrowMathMLAttributes\n    'ms': util.SkruvMsMathMLAttributes\n    'mspace': util.SkruvMspaceMathMLAttributes\n    'msqrt': util.SkruvMsqrtMathMLAttributes\n    'mstyle': util.SkruvMstyleMathMLAttributes\n    'msub': util.SkruvMsubMathMLAttributes\n    'msup': util.SkruvMsupMathMLAttributes\n    'msubsup': util.SkruvMsubsupMathMLAttributes\n    'mtable': util.SkruvMtableMathMLAttributes\n    'mtd': util.SkruvMtdMathMLAttributes\n    'mtext': util.SkruvMtextMathMLAttributes\n    'mtr': util.SkruvMtrMathMLAttributes\n    'munder': util.SkruvMunderMathMLAttributes\n    'munderover': util.SkruvMunderoverMathMLAttributes\n    'feed': util.SkruvFeedAtomAttributes\n    'entry': util.SkruvEntryAtomAttributes\n    'id': util.SkruvIdAtomAttributes\n    'atomTitle': util.SkruvTitleAtomAttributes\n    'updated': util.SkruvUpdatedAtomAttributes\n    'author': util.SkruvAuthorAtomAttributes\n    'name': util.SkruvNameAtomAttributes\n    'uri': util.SkruvUriAtomAttributes\n    'email': util.SkruvEmailAtomAttributes\n    'atomLink': util.SkruvLinkAtomAttributes\n    'category': util.SkruvCategoryAtomAttributes\n    'contributor': util.SkruvContributorAtomAttributes\n    'generator': util.SkruvGeneratorAtomAttributes\n    'icon': util.SkruvIconAtomAttributes\n    'logo': util.SkruvLogoAtomAttributes\n    'rights': util.SkruvRightsAtomAttributes\n    'subtitle': util.SkruvSubtitleAtomAttributes\n    'content': util.SkruvContentAtomAttributes\n    'atomSummary': util.SkruvSummaryAtomAttributes\n    'published': util.SkruvPublishedAtomAttributes\n    'atomSource': util.SkruvSourceAtomAttributes\n    'urlset': util.SkruvUrlsetSitemapAttributes\n    'url': util.SkruvUrlSitemapAttributes\n    'loc': util.SkruvLocSitemapAttributes\n    'lastmod': util.SkruvLastmodSitemapAttributes\n    'changefreq': util.SkruvChangefreqSitemapAttributes\n    'priority': util.SkruvPrioritySitemapAttributes\n    'sitemapindex': util.SkruvSitemapindexSitemapAttributes\n    'sitemap': util.SkruvSitemapSitemapAttributes\n    'skruvHeader': util.SkruvHeaderAttributes\n    'skruvComment': util.SkruvTextAttributes\n    'skruvText': util.SkruvTextAttributes\n    [elemName: string]: any;\n  }\n}\n\nexport const Fragment = '#fragment'\n\nconst aliases = {\n  'svgA': 'a',\n  'svgScript': 'script',\n  'svgStyle': 'style',\n  'svgTitle': 'title',\n  'atomTitle': 'title',\n  'atomLink': 'link',\n  'atomSummary': 'summary',\n  'atomSource': 'source'\n}\n\nexport const jsxs = (nodeName: string | Function, attributes = { children: [] }) => {\n  // @ts-ignore\n  nodeName = aliases[nodeName] || nodeName\n  if (nodeName === Fragment && attributes.children) { return attributes.children }\n  if (nodeName === Fragment) { return [] }\n  if (typeof nodeName === \"function\") return nodeName(attributes, attributes.children)\n  const { children, ...attrs } = attributes\n  if (children) { return { isSkruvDom: true, t: nodeName, c: [attrs || {}, children] } }\n  return { isSkruvDom: true, t: nodeName, c: [attrs || {}] }\n}\n\nexport const jsx = jsxs\n", "import { render } from 'skruv'\n\nconst styles = /* css */`:root{color:#fff;background:#0f0f0f}`\n// @ts-ignore\nconst Component = props => (<div label={props.a}>{props.children}</div>)\n\nrender(\n  <html lang=\"en-US\">\n    {/* Fragments work too, but are usually not needed. */}\n    <>\n      <head>\n        <title>jsx</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <style>{styles}</style>\n      </head>\n    </>\n    <body>\n      <Component a=\"A component attribute\">\n        <p>A component child</p>\n      </Component>\n      <div>\n        <p>Hello world</p>\n      </div>\n    </body>\n  </html>\n)\n"],
  "mappings": "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",
  "names": ["htmlNS", "keyed", "oldKeys", "attributesMap", "domCache", "render", "current", "currentNode", "parentNode", "ns", "forceFull", "txtNode", "_currentNode", "children", "c", "attributes", "oldAttributes", "key", "value", "evt", "keyedNode", "lastKeyCopy", "noChange", "k", "elementFactory", "_", "Fragment", "aliases", "jsxs", "nodeName", "attributes", "children", "attrs", "jsx", "styles", "Component", "props", "jsx", "render", "jsxs", "Fragment"]
}
